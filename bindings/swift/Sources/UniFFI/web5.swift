// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(web5FFI)
import web5FFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_web5_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_web5_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol LocalJwkManagerProtocol : AnyObject {
    
    func exportPrivateKeys() throws  -> [Jwk]
    
    func generatePrivateKey(curve: Curve, keyAlias: String?) throws  -> String
    
    func getPublicKey(keyAlias: String) throws  -> Jwk
    
    func importPrivateKeys(privateKeys: [Jwk]) throws 
    
    func sign(keyAlias: String, payload: Data) throws  -> Data
    
}

open class LocalJwkManager:
    LocalJwkManagerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_web5_fn_clone_localjwkmanager(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_web5_fn_constructor_localjwkmanager_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_web5_fn_free_localjwkmanager(pointer, $0) }
    }

    

    
open func exportPrivateKeys()throws  -> [Jwk] {
    return try  FfiConverterSequenceTypeJwk.lift(try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_localjwkmanager_export_private_keys(self.uniffiClonePointer(),$0
    )
})
}
    
open func generatePrivateKey(curve: Curve, keyAlias: String?)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_localjwkmanager_generate_private_key(self.uniffiClonePointer(),
        FfiConverterTypeCurve.lower(curve),
        FfiConverterOptionString.lower(keyAlias),$0
    )
})
}
    
open func getPublicKey(keyAlias: String)throws  -> Jwk {
    return try  FfiConverterTypeJwk.lift(try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_localjwkmanager_get_public_key(self.uniffiClonePointer(),
        FfiConverterString.lower(keyAlias),$0
    )
})
}
    
open func importPrivateKeys(privateKeys: [Jwk])throws  {try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_localjwkmanager_import_private_keys(self.uniffiClonePointer(),
        FfiConverterSequenceTypeJwk.lower(privateKeys),$0
    )
}
}
    
open func sign(keyAlias: String, payload: Data)throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_localjwkmanager_sign(self.uniffiClonePointer(),
        FfiConverterString.lower(keyAlias),
        FfiConverterData.lower(payload),$0
    )
})
}
    

}

public struct FfiConverterTypeLocalJwkManager: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LocalJwkManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LocalJwkManager {
        return LocalJwkManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LocalJwkManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LocalJwkManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LocalJwkManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeLocalJwkManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> LocalJwkManager {
    return try FfiConverterTypeLocalJwkManager.lift(pointer)
}

public func FfiConverterTypeLocalJwkManager_lower(_ value: LocalJwkManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLocalJwkManager.lower(value)
}


public struct Document {
    public var id: String
    public var context: [String]?
    public var controller: [String]?
    public var alsoKnownAs: [String]?
    public var verificationMethod: [VerificationMethod]
    public var authentication: [String]?
    public var assertionMethod: [String]?
    public var keyAgreement: [String]?
    public var capabilityInvocation: [String]?
    public var capabilityDelegation: [String]?
    public var service: [Service]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, context: [String]?, controller: [String]?, alsoKnownAs: [String]?, verificationMethod: [VerificationMethod], authentication: [String]?, assertionMethod: [String]?, keyAgreement: [String]?, capabilityInvocation: [String]?, capabilityDelegation: [String]?, service: [Service]?) {
        self.id = id
        self.context = context
        self.controller = controller
        self.alsoKnownAs = alsoKnownAs
        self.verificationMethod = verificationMethod
        self.authentication = authentication
        self.assertionMethod = assertionMethod
        self.keyAgreement = keyAgreement
        self.capabilityInvocation = capabilityInvocation
        self.capabilityDelegation = capabilityDelegation
        self.service = service
    }
}



extension Document: Equatable, Hashable {
    public static func ==(lhs: Document, rhs: Document) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.context != rhs.context {
            return false
        }
        if lhs.controller != rhs.controller {
            return false
        }
        if lhs.alsoKnownAs != rhs.alsoKnownAs {
            return false
        }
        if lhs.verificationMethod != rhs.verificationMethod {
            return false
        }
        if lhs.authentication != rhs.authentication {
            return false
        }
        if lhs.assertionMethod != rhs.assertionMethod {
            return false
        }
        if lhs.keyAgreement != rhs.keyAgreement {
            return false
        }
        if lhs.capabilityInvocation != rhs.capabilityInvocation {
            return false
        }
        if lhs.capabilityDelegation != rhs.capabilityDelegation {
            return false
        }
        if lhs.service != rhs.service {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(context)
        hasher.combine(controller)
        hasher.combine(alsoKnownAs)
        hasher.combine(verificationMethod)
        hasher.combine(authentication)
        hasher.combine(assertionMethod)
        hasher.combine(keyAgreement)
        hasher.combine(capabilityInvocation)
        hasher.combine(capabilityDelegation)
        hasher.combine(service)
    }
}


public struct FfiConverterTypeDocument: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Document {
        return
            try Document(
                id: FfiConverterString.read(from: &buf), 
                context: FfiConverterOptionSequenceString.read(from: &buf), 
                controller: FfiConverterOptionSequenceString.read(from: &buf), 
                alsoKnownAs: FfiConverterOptionSequenceString.read(from: &buf), 
                verificationMethod: FfiConverterSequenceTypeVerificationMethod.read(from: &buf), 
                authentication: FfiConverterOptionSequenceString.read(from: &buf), 
                assertionMethod: FfiConverterOptionSequenceString.read(from: &buf), 
                keyAgreement: FfiConverterOptionSequenceString.read(from: &buf), 
                capabilityInvocation: FfiConverterOptionSequenceString.read(from: &buf), 
                capabilityDelegation: FfiConverterOptionSequenceString.read(from: &buf), 
                service: FfiConverterOptionSequenceTypeService.read(from: &buf)
        )
    }

    public static func write(_ value: Document, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterOptionSequenceString.write(value.context, into: &buf)
        FfiConverterOptionSequenceString.write(value.controller, into: &buf)
        FfiConverterOptionSequenceString.write(value.alsoKnownAs, into: &buf)
        FfiConverterSequenceTypeVerificationMethod.write(value.verificationMethod, into: &buf)
        FfiConverterOptionSequenceString.write(value.authentication, into: &buf)
        FfiConverterOptionSequenceString.write(value.assertionMethod, into: &buf)
        FfiConverterOptionSequenceString.write(value.keyAgreement, into: &buf)
        FfiConverterOptionSequenceString.write(value.capabilityInvocation, into: &buf)
        FfiConverterOptionSequenceString.write(value.capabilityDelegation, into: &buf)
        FfiConverterOptionSequenceTypeService.write(value.service, into: &buf)
    }
}


public func FfiConverterTypeDocument_lift(_ buf: RustBuffer) throws -> Document {
    return try FfiConverterTypeDocument.lift(buf)
}

public func FfiConverterTypeDocument_lower(_ value: Document) -> RustBuffer {
    return FfiConverterTypeDocument.lower(value)
}


public struct Identifier {
    public var uri: String
    public var url: String
    public var method: String
    public var id: String
    public var params: [String: String]?
    public var path: String?
    public var query: String?
    public var fragment: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, url: String, method: String, id: String, params: [String: String]?, path: String?, query: String?, fragment: String?) {
        self.uri = uri
        self.url = url
        self.method = method
        self.id = id
        self.params = params
        self.path = path
        self.query = query
        self.fragment = fragment
    }
}



extension Identifier: Equatable, Hashable {
    public static func ==(lhs: Identifier, rhs: Identifier) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.url != rhs.url {
            return false
        }
        if lhs.method != rhs.method {
            return false
        }
        if lhs.id != rhs.id {
            return false
        }
        if lhs.params != rhs.params {
            return false
        }
        if lhs.path != rhs.path {
            return false
        }
        if lhs.query != rhs.query {
            return false
        }
        if lhs.fragment != rhs.fragment {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(url)
        hasher.combine(method)
        hasher.combine(id)
        hasher.combine(params)
        hasher.combine(path)
        hasher.combine(query)
        hasher.combine(fragment)
    }
}


public struct FfiConverterTypeIdentifier: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Identifier {
        return
            try Identifier(
                uri: FfiConverterString.read(from: &buf), 
                url: FfiConverterString.read(from: &buf), 
                method: FfiConverterString.read(from: &buf), 
                id: FfiConverterString.read(from: &buf), 
                params: FfiConverterOptionDictionaryStringString.read(from: &buf), 
                path: FfiConverterOptionString.read(from: &buf), 
                query: FfiConverterOptionString.read(from: &buf), 
                fragment: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: Identifier, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.url, into: &buf)
        FfiConverterString.write(value.method, into: &buf)
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.params, into: &buf)
        FfiConverterOptionString.write(value.path, into: &buf)
        FfiConverterOptionString.write(value.query, into: &buf)
        FfiConverterOptionString.write(value.fragment, into: &buf)
    }
}


public func FfiConverterTypeIdentifier_lift(_ buf: RustBuffer) throws -> Identifier {
    return try FfiConverterTypeIdentifier.lift(buf)
}

public func FfiConverterTypeIdentifier_lower(_ value: Identifier) -> RustBuffer {
    return FfiConverterTypeIdentifier.lower(value)
}


public struct Jwk {
    public var alg: String
    public var kty: String
    public var crv: String
    public var d: String?
    public var x: String
    public var y: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(alg: String, kty: String, crv: String, d: String?, x: String, y: String?) {
        self.alg = alg
        self.kty = kty
        self.crv = crv
        self.d = d
        self.x = x
        self.y = y
    }
}



extension Jwk: Equatable, Hashable {
    public static func ==(lhs: Jwk, rhs: Jwk) -> Bool {
        if lhs.alg != rhs.alg {
            return false
        }
        if lhs.kty != rhs.kty {
            return false
        }
        if lhs.crv != rhs.crv {
            return false
        }
        if lhs.d != rhs.d {
            return false
        }
        if lhs.x != rhs.x {
            return false
        }
        if lhs.y != rhs.y {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(alg)
        hasher.combine(kty)
        hasher.combine(crv)
        hasher.combine(d)
        hasher.combine(x)
        hasher.combine(y)
    }
}


public struct FfiConverterTypeJwk: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Jwk {
        return
            try Jwk(
                alg: FfiConverterString.read(from: &buf), 
                kty: FfiConverterString.read(from: &buf), 
                crv: FfiConverterString.read(from: &buf), 
                d: FfiConverterOptionString.read(from: &buf), 
                x: FfiConverterString.read(from: &buf), 
                y: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: Jwk, into buf: inout [UInt8]) {
        FfiConverterString.write(value.alg, into: &buf)
        FfiConverterString.write(value.kty, into: &buf)
        FfiConverterString.write(value.crv, into: &buf)
        FfiConverterOptionString.write(value.d, into: &buf)
        FfiConverterString.write(value.x, into: &buf)
        FfiConverterOptionString.write(value.y, into: &buf)
    }
}


public func FfiConverterTypeJwk_lift(_ buf: RustBuffer) throws -> Jwk {
    return try FfiConverterTypeJwk.lift(buf)
}

public func FfiConverterTypeJwk_lower(_ value: Jwk) -> RustBuffer {
    return FfiConverterTypeJwk.lower(value)
}


public struct Service {
    public var id: String
    public var type: String
    public var serviceEndpoint: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, type: String, serviceEndpoint: String) {
        self.id = id
        self.type = type
        self.serviceEndpoint = serviceEndpoint
    }
}



extension Service: Equatable, Hashable {
    public static func ==(lhs: Service, rhs: Service) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.type != rhs.type {
            return false
        }
        if lhs.serviceEndpoint != rhs.serviceEndpoint {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(type)
        hasher.combine(serviceEndpoint)
    }
}


public struct FfiConverterTypeService: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Service {
        return
            try Service(
                id: FfiConverterString.read(from: &buf), 
                type: FfiConverterString.read(from: &buf), 
                serviceEndpoint: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Service, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.type, into: &buf)
        FfiConverterString.write(value.serviceEndpoint, into: &buf)
    }
}


public func FfiConverterTypeService_lift(_ buf: RustBuffer) throws -> Service {
    return try FfiConverterTypeService.lift(buf)
}

public func FfiConverterTypeService_lower(_ value: Service) -> RustBuffer {
    return FfiConverterTypeService.lower(value)
}


public struct VerificationMethod {
    public var id: String
    public var type: String
    public var controller: String
    public var publicKeyJwk: Jwk

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, type: String, controller: String, publicKeyJwk: Jwk) {
        self.id = id
        self.type = type
        self.controller = controller
        self.publicKeyJwk = publicKeyJwk
    }
}



extension VerificationMethod: Equatable, Hashable {
    public static func ==(lhs: VerificationMethod, rhs: VerificationMethod) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.type != rhs.type {
            return false
        }
        if lhs.controller != rhs.controller {
            return false
        }
        if lhs.publicKeyJwk != rhs.publicKeyJwk {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(type)
        hasher.combine(controller)
        hasher.combine(publicKeyJwk)
    }
}


public struct FfiConverterTypeVerificationMethod: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VerificationMethod {
        return
            try VerificationMethod(
                id: FfiConverterString.read(from: &buf), 
                type: FfiConverterString.read(from: &buf), 
                controller: FfiConverterString.read(from: &buf), 
                publicKeyJwk: FfiConverterTypeJwk.read(from: &buf)
        )
    }

    public static func write(_ value: VerificationMethod, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.type, into: &buf)
        FfiConverterString.write(value.controller, into: &buf)
        FfiConverterTypeJwk.write(value.publicKeyJwk, into: &buf)
    }
}


public func FfiConverterTypeVerificationMethod_lift(_ buf: RustBuffer) throws -> VerificationMethod {
    return try FfiConverterTypeVerificationMethod.lift(buf)
}

public func FfiConverterTypeVerificationMethod_lower(_ value: VerificationMethod) -> RustBuffer {
    return FfiConverterTypeVerificationMethod.lower(value)
}


public enum CryptoError {

    
    
    case MissingPrivateKey(message: String)
    
    case DecodeError(message: String)
    
    case InvalidKeyLength(message: String)
    
    case InvalidSignatureLength(message: String)
    
    case PublicKeyFailure(message: String)
    
    case PrivateKeyFailure(message: String)
    
    case VerificationFailure(message: String)
    
    case SignFailure(message: String)
    
}


public struct FfiConverterTypeCryptoError: FfiConverterRustBuffer {
    typealias SwiftType = CryptoError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CryptoError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .MissingPrivateKey(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .DecodeError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .InvalidKeyLength(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .InvalidSignatureLength(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .PublicKeyFailure(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .PrivateKeyFailure(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .VerificationFailure(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .SignFailure(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CryptoError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .MissingPrivateKey(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .DecodeError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .InvalidKeyLength(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .InvalidSignatureLength(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .PublicKeyFailure(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .PrivateKeyFailure(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .VerificationFailure(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .SignFailure(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))

        
        }
    }
}


extension CryptoError: Equatable, Hashable {}

extension CryptoError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Curve {
    
    case secp256k1
    case ed25519
}


public struct FfiConverterTypeCurve: FfiConverterRustBuffer {
    typealias SwiftType = Curve

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Curve {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .secp256k1
        
        case 2: return .ed25519
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Curve, into buf: inout [UInt8]) {
        switch value {
        
        
        case .secp256k1:
            writeInt(&buf, Int32(1))
        
        
        case .ed25519:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeCurve_lift(_ buf: RustBuffer) throws -> Curve {
    return try FfiConverterTypeCurve.lift(buf)
}

public func FfiConverterTypeCurve_lower(_ value: Curve) -> RustBuffer {
    return FfiConverterTypeCurve.lower(value)
}



extension Curve: Equatable, Hashable {}




public enum DocumentError {

    
    
    case VerificationMethodNotFound(message: String)
    
}


public struct FfiConverterTypeDocumentError: FfiConverterRustBuffer {
    typealias SwiftType = DocumentError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocumentError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .VerificationMethodNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DocumentError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .VerificationMethodNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))

        
        }
    }
}


extension DocumentError: Equatable, Hashable {}

extension DocumentError: Error { }


public enum IdentifierError {

    
    
    case RegexPatternFailure(message: String)
    
    case ParseFailure(message: String)
    
}


public struct FfiConverterTypeIdentifierError: FfiConverterRustBuffer {
    typealias SwiftType = IdentifierError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IdentifierError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .RegexPatternFailure(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .ParseFailure(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: IdentifierError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .RegexPatternFailure(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .ParseFailure(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))

        
        }
    }
}


extension IdentifierError: Equatable, Hashable {}

extension IdentifierError: Error { }


public enum JwkError {

    
    
    case ThumbprintFailed(message: String)
    
}


public struct FfiConverterTypeJwkError: FfiConverterRustBuffer {
    typealias SwiftType = JwkError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> JwkError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ThumbprintFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: JwkError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .ThumbprintFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))

        
        }
    }
}


extension JwkError: Equatable, Hashable {}

extension JwkError: Error { }


public enum KeyManagerError {

    
    
    case KeyGenerationFailed(message: String)
    
    case SigningKeyNotFound(message: String)
    
    case KeyError(message: String)
    
    case KeyStoreError(message: String)
    
}


public struct FfiConverterTypeKeyManagerError: FfiConverterRustBuffer {
    typealias SwiftType = KeyManagerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyManagerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .KeyGenerationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .SigningKeyNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .KeyError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .KeyStoreError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KeyManagerError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .KeyGenerationFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .SigningKeyNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .KeyError(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .KeyStoreError(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))

        
        }
    }
}


extension KeyManagerError: Equatable, Hashable {}

extension KeyManagerError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum KeySelector {
    
    case keyId(keyId: String
    )
    case methodType(methodType: VerificationMethodType
    )
}


public struct FfiConverterTypeKeySelector: FfiConverterRustBuffer {
    typealias SwiftType = KeySelector

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeySelector {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .keyId(keyId: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .methodType(methodType: try FfiConverterTypeVerificationMethodType.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KeySelector, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .keyId(keyId):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(keyId, into: &buf)
            
        
        case let .methodType(methodType):
            writeInt(&buf, Int32(2))
            FfiConverterTypeVerificationMethodType.write(methodType, into: &buf)
            
        }
    }
}


public func FfiConverterTypeKeySelector_lift(_ buf: RustBuffer) throws -> KeySelector {
    return try FfiConverterTypeKeySelector.lift(buf)
}

public func FfiConverterTypeKeySelector_lower(_ value: KeySelector) -> RustBuffer {
    return FfiConverterTypeKeySelector.lower(value)
}



extension KeySelector: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum VerificationMethodType {
    
    case verificationMethod
    case assertionMethod
    case authentication
    case capabilityDelegation
    case capabilityInvocation
}


public struct FfiConverterTypeVerificationMethodType: FfiConverterRustBuffer {
    typealias SwiftType = VerificationMethodType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VerificationMethodType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .verificationMethod
        
        case 2: return .assertionMethod
        
        case 3: return .authentication
        
        case 4: return .capabilityDelegation
        
        case 5: return .capabilityInvocation
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VerificationMethodType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .verificationMethod:
            writeInt(&buf, Int32(1))
        
        
        case .assertionMethod:
            writeInt(&buf, Int32(2))
        
        
        case .authentication:
            writeInt(&buf, Int32(3))
        
        
        case .capabilityDelegation:
            writeInt(&buf, Int32(4))
        
        
        case .capabilityInvocation:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeVerificationMethodType_lift(_ buf: RustBuffer) throws -> VerificationMethodType {
    return try FfiConverterTypeVerificationMethodType.lift(buf)
}

public func FfiConverterTypeVerificationMethodType_lower(_ value: VerificationMethodType) -> RustBuffer {
    return FfiConverterTypeVerificationMethodType.lower(value)
}



extension VerificationMethodType: Equatable, Hashable {}



fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypeService: FfiConverterRustBuffer {
    typealias SwiftType = [Service]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeService.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeService.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionDictionaryStringString: FfiConverterRustBuffer {
    typealias SwiftType = [String: String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeJwk: FfiConverterRustBuffer {
    typealias SwiftType = [Jwk]

    public static func write(_ value: [Jwk], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeJwk.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Jwk] {
        let len: Int32 = try readInt(&buf)
        var seq = [Jwk]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeJwk.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeService: FfiConverterRustBuffer {
    typealias SwiftType = [Service]

    public static func write(_ value: [Service], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeService.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Service] {
        let len: Int32 = try readInt(&buf)
        var seq = [Service]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeService.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeVerificationMethod: FfiConverterRustBuffer {
    typealias SwiftType = [VerificationMethod]

    public static func write(_ value: [VerificationMethod], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeVerificationMethod.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [VerificationMethod] {
        let len: Int32 = try readInt(&buf)
        var seq = [VerificationMethod]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeVerificationMethod.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
public func computeThumbprint(jwk: Jwk)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeJwkError.lift) {
    uniffi_web5_fn_func_compute_thumbprint(
        FfiConverterTypeJwk.lower(jwk),$0
    )
})
}
public func ed25519Generate()throws  -> Jwk {
    return try  FfiConverterTypeJwk.lift(try rustCallWithError(FfiConverterTypeCryptoError.lift) {
    uniffi_web5_fn_func_ed25519_generate($0
    )
})
}
public func ed25519Sign(privateJwk: Jwk, payload: Data)throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeCryptoError.lift) {
    uniffi_web5_fn_func_ed25519_sign(
        FfiConverterTypeJwk.lower(privateJwk),
        FfiConverterData.lower(payload),$0
    )
})
}
public func ed25519Verify(publicJwk: Jwk, payload: Data, signature: Data)throws  {try rustCallWithError(FfiConverterTypeCryptoError.lift) {
    uniffi_web5_fn_func_ed25519_verify(
        FfiConverterTypeJwk.lower(publicJwk),
        FfiConverterData.lower(payload),
        FfiConverterData.lower(signature),$0
    )
}
}
public func getVerificationMethod(document: Document, keySelector: KeySelector)throws  -> VerificationMethod {
    return try  FfiConverterTypeVerificationMethod.lift(try rustCallWithError(FfiConverterTypeDocumentError.lift) {
    uniffi_web5_fn_func_get_verification_method(
        FfiConverterTypeDocument.lower(document),
        FfiConverterTypeKeySelector.lower(keySelector),$0
    )
})
}
public func identifierParse(didUri: String)throws  -> Identifier {
    return try  FfiConverterTypeIdentifier.lift(try rustCallWithError(FfiConverterTypeIdentifierError.lift) {
    uniffi_web5_fn_func_identifier_parse(
        FfiConverterString.lower(didUri),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_web5_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_web5_checksum_func_compute_thumbprint() != 41089) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_func_ed25519_generate() != 65237) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_func_ed25519_sign() != 54460) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_func_ed25519_verify() != 12689) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_func_get_verification_method() != 42866) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_func_identifier_parse() != 28515) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_localjwkmanager_export_private_keys() != 50556) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_localjwkmanager_generate_private_key() != 3998) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_localjwkmanager_get_public_key() != 63695) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_localjwkmanager_import_private_keys() != 12405) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_localjwkmanager_sign() != 36184) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_constructor_localjwkmanager_new() != 56159) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all