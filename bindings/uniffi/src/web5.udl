namespace web5 {
   
};

interface RcbError {
  string message();
  string error_type();
  string error_variant();
};

dictionary RcbJwkData {
  string alg;
  string kty;
  string crv;
  string? d;
  string x;
  string? y;
};

interface RcbInMemoryKeyManager {
  constructor();
  [Throws=RcbError]
  RcbJwkData generate_key_material();
  [Throws=RcbError]
  RcbSigner get_signer(RcbJwkData public_jwk);
  [Throws=RcbError]
  RcbJwkData import_key(RcbJwkData private_key);
};

enum RcbDsa {
  "Ed25519"
};

[Trait]
interface RcbSigner {
  [Throws=RcbError]
  bytes sign([ByRef] sequence<u8> payload);
};

[Trait]
interface RcbVerifier {
  [Throws=RcbError]
  boolean verify([ByRef] sequence<u8> message, [ByRef] sequence<u8> signature);
};

interface RcbEd25519Signer {
  constructor(RcbJwkData private_key);
  [Throws=RcbError]
  bytes sign([ByRef] sequence<u8> payload);
};

interface RcbEd25519Verifier {
  constructor(RcbJwkData public_jwk);
  [Throws=RcbError]
  boolean verify([ByRef] sequence<u8> message, [ByRef] sequence<u8> signature);
};

dictionary RcbDidData {
  string uri;
  string url;
  string method;
  string id;
  record<string, string>? params;
  string? path;
  string? query;
  string? fragment;
};

interface RcbDid {
  [Throws=RcbError]
  constructor([ByRef] string uri);
  RcbDidData get_data();
};

dictionary RcbDocumentData {
  string id;
  sequence<string>? context;
  sequence<string>? controller;
  sequence<string>? also_known_as;
  sequence<RcbVerificationMethodData> verification_method;
  sequence<string>? authentication;
  sequence<string>? assertion_method;
  sequence<string>? key_agreement;
  sequence<string>? capability_invocation;
  sequence<string>? capability_delegation;
  sequence<RcbServiceData>? service;
};

dictionary RcbVerificationMethodData {
  string id;
  string type;
  string controller;
  RcbJwkData public_key_jwk;
};

dictionary RcbServiceData {
  string id;
  string type;
  sequence<string> service_endpoint;
};

enum RcbResolutionMetadataError {
  "InvalidDid",
  "NotFound",
  "RepresentationNotSupported",
  "MethodNotSupported",
  "InvalidDidDocument",
  "InvalidDidDocumentLength",
  "InternalError",
};

dictionary RcbResolutionMetadataData {
  RcbResolutionMetadataError? error;
};

dictionary RcbDocumentMetadataData {
  string? created;
  string? updated;
  boolean? deactivated;
  string? next_update;
  string? version_id;
  string? next_version_id;
  sequence<string>? equivalent_id;
  string? canonical_id;
};

dictionary RcbResolutionResultData {
  RcbDocumentData? document;
  RcbDocumentMetadataData? document_metadata;
  RcbResolutionMetadataData resolution_metadata;
};

interface RcbResolutionResult {
  constructor([ByRef] string uri);
  RcbResolutionResultData get_data();
};

dictionary RcbDidJwkData {
  RcbDidData did;
  RcbDocumentData document;
};

interface RcbDidJwk {
  [Name=from_public_jwk, Throws=RcbError]
  constructor(RcbJwkData public_jwk);
  [Name=from_uri, Throws=RcbError]
  constructor([ByRef] string uri);
  RcbDidJwkData get_data();
};

dictionary RcbDidWebData {
  RcbDidData did;
  RcbDocumentData document;
};

interface RcbDidWeb {
  [Name=from_uri, Throws=RcbError]
  constructor([ByRef] string uri);
  RcbDidWebData get_data();
};

dictionary RcbDidDhtData {
  RcbDidData did;
  RcbDocumentData document;
};

interface RcbDidDht {
  [Name=from_identity_key, Throws=RcbError]
  constructor(RcbJwkData identity_key);
  [Name=from_uri, Throws=RcbError]
  constructor([ByRef] string uri);
  [Throws=RcbError]
  void publish(RcbSigner signer);
  [Throws=RcbError]
  void deactivate(RcbSigner signer);
  RcbDidDhtData get_data();
};

dictionary RcbCredentialSubjectData {
  string id;
  record<string, string>? params;
};

dictionary RcbVerifiableCredentialData {
  sequence<string> context;
  string id;
  sequence<string> type;
  string issuer;
  string issuance_date;
  string? expiration_date;
  RcbCredentialSubjectData credential_subject;
};

interface RcbVerifiableCredential {
  constructor(RcbVerifiableCredentialData data);
  [Name=verify, Throws=RcbError]
  constructor([ByRef] string vcjwt);
  [Name=verify_with_verifier, Throws=RcbError]
  constructor([ByRef] string vcjwt, RcbVerifier verifier);
  [Throws=RcbError]
  string sign(RcbSigner signer);
  RcbVerifiableCredentialData get_data();
};