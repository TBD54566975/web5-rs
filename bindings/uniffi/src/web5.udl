namespace web5 {};

[Error]
enum KeyError {
    "KeyGenerationFailed",
    "SerializationFailed",
    "CurveNotFound",
    "AlgorithmNotFound",
    "JwkError",
    "CryptoError",
};

[Trait]
interface Key {
  [Throws=KeyError]
  string alias();
  [Throws=KeyError]
  Jwk jwk();
};

[Trait]
interface PublicKey {
  [Throws=KeyError]
  void verify([ByRef] sequence<u8> payload, [ByRef] sequence<u8> signature);
};

[Trait]
interface PrivateKey {
  [Throws=KeyError]
  PublicKey to_public();
  [Throws=KeyError]
  bytes sign([ByRef] sequence<u8> payload);
};

[Error]
enum JwkError {
  "ThumbprintFailed",
};

interface Jwk {
  [Throws=JwkError]
  string compute_thumbprint();

  [Throws=KeyError]
  string alias();
  [Throws=KeyError]
  Jwk jwk();

  [Throws=KeyError]
  void verify([ByRef] sequence<u8> payload, [ByRef] sequence<u8> signature);

  [Throws=KeyError]
  PublicKey to_public();
  [Throws=KeyError]
  bytes sign([ByRef] sequence<u8> payload);
};

enum Curve {
  "Secp256k1",
  "Ed25519",
};

[Error]
enum KeyManagerError {
  "KeyGenerationFailed",
  "SigningKeyNotFound",
  "KeyError",
  "KeyStoreError",
};

[Trait]
interface KeyManager {
  [Throws=KeyManagerError]
  string generate_private_key(Curve curve, string? key_alias);
  [Throws=KeyManagerError]
  PublicKey get_public_key([ByRef] string key_alias);
  [Throws=KeyManagerError]
  bytes sign([ByRef] string key_alias, [ByRef] sequence<u8> payload);
  [Throws=KeyManagerError]
  sequence<PrivateKey> export_private_keys();
  [Throws=KeyManagerError]
  void import_private_keys(sequence<PrivateKey> private_keys);
};

interface LocalKeyManager {
  [Name=new_in_memory]
  constructor();

  [Throws=KeyManagerError]
  string generate_private_key(Curve curve, string? key_alias);
  [Throws=KeyManagerError]
  PublicKey get_public_key([ByRef] string key_alias);
  [Throws=KeyManagerError]
  bytes sign([ByRef] string key_alias, [ByRef] sequence<u8> payload);
  [Throws=KeyManagerError]
  sequence<PrivateKey> export_private_keys();
  [Throws=KeyManagerError]
  void import_private_keys(sequence<PrivateKey> private_keys);
};