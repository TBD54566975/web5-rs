namespace web5 {};

[Error]
enum JwkError {
    "ThumbprintFailed",
};

interface Jwk {
    constructor(string alg, string kty, string crv, string? d, string x, string? y);
    [Throws=JwkError]
    string compute_thumbprint();
};

[Error]
enum CryptoError {
    "MissingPrivateKey",
    "DecodeError",
    "InvalidKeyLength",
    "InvalidSignatureLength",
    "PublicKeyFailure",
    "PrivateKeyFailure",
    "VerificationFailure",
    "SignFailure",
};

interface Ed25199 {
    constructor();
    [Throws=CryptoError]
    Jwk generate();
    [Throws=CryptoError]
    bytes sign([ByRef] Jwk jwk, [ByRef] bytes payload);
    [Throws=CryptoError]
    void verify([ByRef] Jwk jwk, [ByRef] bytes payload, [ByRef] bytes signature);
};

[Error]
enum KeyManagerError {
    "KeyGenerationFailed",
    "SigningKeyNotFound",
    "KeyError",
    "KeyStoreError",
};

enum Curve {
    "Secp256k1",
    "Ed25519",
};

interface LocalJwkManager {
    constructor();
    [Throws=KeyManagerError]
    string generate_private_key(Curve curve, string? key_alias);
    [Throws=KeyManagerError]
    Jwk get_public_key(string key_alias);
    [Throws=KeyManagerError]
    bytes sign(string key_alias, [ByRef] bytes payload);
    [Throws=KeyManagerError]
    sequence<Jwk> export_private_keys();
    [Throws=KeyManagerError]
    void import_private_keys(sequence<Jwk> private_keys);
};

[Error]
enum IdentifierError {
    "RegexPatternFailure",
    "ParseFailure",
};

interface Identifier {
    [Throws=IdentifierError]
    constructor(string did_uri);
};