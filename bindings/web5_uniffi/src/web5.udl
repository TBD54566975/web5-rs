namespace web5 {
  JwkData ed25519_generator_generate();

  ResolutionResult did_jwk_resolve([ByRef] string uri);
  [Async, Throws=RustCoreError]
  ResolutionResult did_web_resolve([ByRef] string uri);
  [Throws=RustCoreError]
  ResolutionResult did_dht_resolve([ByRef] string uri);
};

interface RustCoreError {
  string error_type();
  string variant();
  string message();
};

dictionary JwkData {
  string alg;
  string kty;
  string crv;
  string? d;
  string x;
  string? y;
};

[Trait]
interface KeyManager {
  [Throws=RustCoreError]
  Signer get_signer(JwkData public_jwk);
};

interface InMemoryKeyManager {
  constructor();
  [Throws=RustCoreError]
  Signer get_signer(JwkData public_jwk);
  [Throws=RustCoreError]
  JwkData import_private_jwk(JwkData private_key);
  KeyManager get_as_key_manager();
};

enum Dsa {
  "Ed25519"
};

[Trait]
interface Signer {
  [Throws=RustCoreError]
  bytes sign([ByRef] sequence<u8> payload);
};

[Trait]
interface Verifier {
  [Throws=RustCoreError]
  boolean verify([ByRef] sequence<u8> message, [ByRef] sequence<u8> signature);
};

interface Ed25519Signer {
  constructor(JwkData private_key);
  [Throws=RustCoreError]
  bytes sign([ByRef] sequence<u8> payload);
};

interface Ed25519Verifier {
  constructor(JwkData public_jwk);
  [Throws=RustCoreError]
  boolean verify([ByRef] sequence<u8> message, [ByRef] sequence<u8> signature);
};

dictionary DidData {
  string uri;
  string url;
  string method;
  string id;
  record<string, string>? params;
  string? path;
  string? query;
  string? fragment;
};

interface Did {
  [Throws=RustCoreError]
  constructor([ByRef] string uri);
  DidData get_data();
};

dictionary DocumentData {
  string id;
  sequence<string>? context;
  sequence<string>? controller;
  sequence<string>? also_known_as;
  sequence<VerificationMethodData> verification_method;
  sequence<string>? authentication;
  sequence<string>? assertion_method;
  sequence<string>? key_agreement;
  sequence<string>? capability_invocation;
  sequence<string>? capability_delegation;
  sequence<ServiceData>? service;
};

dictionary VerificationMethodData {
  string id;
  string type;
  string controller;
  JwkData public_key_jwk;
};

dictionary ServiceData {
  string id;
  string type;
  sequence<string> service_endpoint;
};

interface Document {
  constructor(DocumentData data);
  DocumentData get_data();
  [Throws=RustCoreError]
  JwkData find_public_key_jwk(string key_id);
};

enum ResolutionMetadataError {
  "InvalidDid",
  "NotFound",
  "RepresentationNotSupported",
  "MethodNotSupported",
  "InvalidDidDocument",
  "InvalidDidDocumentLength",
  "InternalError",
};

dictionary ResolutionMetadataData {
  ResolutionMetadataError? error;
};

dictionary DocumentMetadataData {
  string? created;
  string? updated;
  boolean? deactivated;
  string? next_update;
  string? version_id;
  string? next_version_id;
  sequence<string>? equivalent_id;
  string? canonical_id;
};

dictionary ResolutionResultData {
  DocumentData? document;
  DocumentMetadataData? document_metadata;
  ResolutionMetadataData resolution_metadata;
};

interface ResolutionResult {
  constructor([ByRef] string uri);
  ResolutionResultData get_data();
};

dictionary DidJwkData {
  DidData did;
  DocumentData document;
};

interface DidJwk {
  [Name=from_public_jwk, Throws=RustCoreError]
  constructor(JwkData public_jwk);
  [Name=from_uri, Throws=RustCoreError]
  constructor([ByRef] string uri);
  DidJwkData get_data();
};

dictionary DidWebData {
  DidData did;
  DocumentData document;
};

interface DidWeb {
  [Async, Name=from_uri, Throws=RustCoreError]
  constructor([ByRef] string uri);
  DidWebData get_data();
};

dictionary DidDhtData {
  DidData did;
  DocumentData document;
};

interface DidDht {
  [Name=from_identity_key, Throws=RustCoreError]
  constructor(JwkData identity_key);
  [Name=from_uri, Throws=RustCoreError]
  constructor([ByRef] string uri);
  [Throws=RustCoreError]
  void publish(Signer signer);
  [Throws=RustCoreError]
  void deactivate(Signer signer);
  DidDhtData get_data();
};

dictionary BearerDidData {
  DidData did;
  DocumentData document;
  KeyManager key_manager;
};

interface BearerDid {
  [Throws=RustCoreError]
  constructor([ByRef] string uri, KeyManager key_manager);
  BearerDidData get_data();
  [Throws=RustCoreError]
  Signer get_signer(string key_id);
};

dictionary VerifiableCredentialData {
  sequence<string> context;
  string id;
  sequence<string> type;
  string issuer;
  string issuance_date;
  string? expiration_date;
  string credential_subject;
};

interface VerifiableCredential {
  [Throws=RustCoreError]
  constructor(VerifiableCredentialData data);
  [Name=verify, Throws=RustCoreError]
  constructor([ByRef] string vcjwt);
  [Name=verify_with_verifier, Throws=RustCoreError]
  constructor([ByRef] string vcjwt, Verifier verifier);
  [Throws=RustCoreError]
  string sign(BearerDid bearer_did);
  [Throws=RustCoreError]
  string sign_with_signer([ByRef] string key_id, Signer signer);
  [Throws=RustCoreError]
  VerifiableCredentialData get_data();
};

dictionary PresentationDefinitionData {
  string id;
  string? name;
  string? purpose;
  sequence<InputDescriptorData> input_descriptors;
};

dictionary InputDescriptorData {
  string id;
  string? name;
  string? purpose;
  ConstraintsData constraints;
};

dictionary ConstraintsData {
  sequence<FieldData> fields;
};

enum Optionality {
  "Required",
  "Preferred",
};

dictionary FieldData {
  string? id;
  string? name;
  sequence<string> path;
  string? purpose;
  FilterData? filter;
  boolean? optional;
  Optionality? predicate;
};

dictionary FilterData {
  string? type;
  string? pattern;
  string? const_value;
};

interface PresentationDefinition {
  constructor(PresentationDefinitionData data);
  PresentationDefinitionData get_data();
  [Throws=RustCoreError]
  sequence<string> select_credentials([ByRef] sequence<string> vc_jwts);
};