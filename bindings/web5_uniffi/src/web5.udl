namespace web5 {
  JwkData ed25519_generator_generate();

  [Throws=Web5Error]
  BearerDid did_jwk_create(DidJwkCreateOptions? options);
  ResolutionResult did_jwk_resolve([ByRef] string uri);

  [Throws=Web5Error]
  BearerDid did_web_create(string domain, DidWebCreateOptions? options);
  ResolutionResult did_web_resolve([ByRef] string uri);

  [Throws=Web5Error]
  BearerDid did_dht_create(DidDhtCreateOptions? options);
  [Throws=Web5Error]
  void did_dht_publish(BearerDid bearer_did, string? gateway_url);
  ResolutionResult did_dht_resolve([ByRef] string uri, string? gateway_url);
};

[Error]
interface Web5Error {
  Error(string type, string variant, string msg);
};

dictionary JwkData {
  string? alg;
  string kty;
  string crv;
  string? d;
  string x;
  string? y;
};

interface Jwk {
  constructor(JwkData data);
  JwkData get_data();
  [Throws=Web5Error]
  string compute_thumbprint();
};

[Trait, WithForeign]
interface KeyManager {
  [Throws=Web5Error]
  JwkData import_private_jwk(JwkData private_jwk);
  [Throws=Web5Error]
  Signer get_signer(JwkData public_jwk);
};

[Trait, WithForeign]
interface KeyExporter {
  [Throws=Web5Error]
  sequence<JwkData> export_private_jwks();
};

interface InMemoryKeyManager {
  constructor();
  [Throws=Web5Error]
  JwkData import_private_jwk(JwkData private_jwk);
  [Throws=Web5Error]
  Signer get_signer(JwkData public_jwk);
  KeyManager get_as_key_manager();
  [Throws=Web5Error]
  sequence<JwkData> export_private_jwks();
};

enum Dsa {
  "Ed25519",
  "Secp256k1"
};

[Trait, WithForeign]
interface Signer {
  [Throws=Web5Error]
  bytes sign(bytes payload);
};

[Trait, WithForeign]
interface Verifier {
  [Throws=Web5Error]
  void verify(bytes message, bytes signature);
};

interface Ed25519Signer {
  constructor(JwkData private_key);
  [Throws=Web5Error]
  bytes sign(bytes payload);
};

interface Ed25519Verifier {
  constructor(JwkData public_jwk);
  [Throws=Web5Error]
  void verify(bytes message, bytes signature);
};

dictionary DidData {
  string uri;
  string url;
  string method;
  string id;
  record<string, string>? params;
  string? path;
  string? query;
  string? fragment;
};

interface Did {
  [Throws=Web5Error]
  constructor([ByRef] string uri);
  DidData get_data();
};

dictionary DocumentData {
  string id;
  sequence<string>? context;
  sequence<string>? controller;
  sequence<string>? also_known_as;
  sequence<VerificationMethodData> verification_method;
  sequence<string>? authentication;
  sequence<string>? assertion_method;
  sequence<string>? key_agreement;
  sequence<string>? capability_invocation;
  sequence<string>? capability_delegation;
  sequence<ServiceData>? service;
};

dictionary VerificationMethodData {
  string id;
  string type;
  string controller;
  JwkData public_key_jwk;
};

dictionary ServiceData {
  string id;
  string type;
  sequence<string> service_endpoint;
};

interface Document {
  constructor(DocumentData data);
  DocumentData get_data();
  [Throws=Web5Error, Name=from_json_string]
  constructor(string json);
  [Throws=Web5Error]
  string to_json_string();
};

enum ResolutionMetadataError {
  "InvalidDid",
  "NotFound",
  "RepresentationNotSupported",
  "MethodNotSupported",
  "InvalidDidDocument",
  "InvalidPublicKey",
  "InvalidDidDocumentLength",
  "InternalError",
};

dictionary ResolutionMetadataData {
  ResolutionMetadataError? error;
};

dictionary DocumentMetadataData {
  string? created;
  string? updated;
  boolean? deactivated;
  string? next_update;
  string? version_id;
  string? next_version_id;
  sequence<string>? equivalent_id;
  string? canonical_id;
};

dictionary ResolutionResultData {
  DocumentData? document;
  DocumentMetadataData? document_metadata;
  ResolutionMetadataData resolution_metadata;
};

interface ResolutionResult {
  [Name=resolve]
  constructor([ByRef] string uri);
  ResolutionResultData get_data();
};

dictionary DidJwkCreateOptions {
  KeyManager? key_manager;
  Dsa? dsa;
};

dictionary DidWebCreateOptions {
  KeyManager? key_manager;
  Dsa? dsa;
  sequence<ServiceData>? service;
  sequence<string>? controller;
  sequence<string>? also_known_as;
  sequence<VerificationMethodData>? verification_method;
};

dictionary DidDhtCreateOptions {
  boolean? publish;
  string? gateway_url;
  KeyManager? key_manager;
  sequence<ServiceData>? service;
  sequence<string>? controller;
  sequence<string>? also_known_as;
  sequence<VerificationMethodData>? verification_method;
};

dictionary PortableDidData {
  string did_uri;
  DocumentData document;
  sequence<JwkData> private_jwks;
};

interface PortableDid {
  constructor(string did_uri, DocumentData document, sequence<JwkData> private_jwks);
  [Name=from_json_string, Throws=Web5Error]
  constructor([ByRef] string json);
  PortableDidData get_data();
  [Throws=Web5Error]
  string to_json_string();
};

dictionary BearerDidData {
  DidData did;
  DocumentData document;
  KeyManager key_manager;
};

interface BearerDid {
  constructor(DidData did, DocumentData document, KeyManager key_manager);
  [Throws=Web5Error, Name=from_portable_did]
  constructor(PortableDid portable_did);
  BearerDidData get_data();
  [Throws=Web5Error]
  Signer get_signer(string verification_method_id);
  [Throws=Web5Error]
  PortableDid to_portable_did(KeyExporter key_exporter);
};

interface PresentationDefinition {
  [Throws=Web5Error]
  constructor(string json_serialized_presentation_definition);
  [Throws=Web5Error]
  string get_json_serialized_presentation_definition();
  [Throws=Web5Error]
  sequence<string> select_credentials([ByRef] sequence<string> vc_jwts);
};





dictionary VerifiableCredentialCreateOptionsData {
  string? id;
  sequence<string>? context;
  sequence<string>? type;
  timestamp? issuance_date;
  timestamp? expiration_date;
};

interface VerifiableCredential {
  [Throws=Web5Error, Name=create]
  constructor(
    string json_serialized_issuer,
    string json_serialized_credential_subject,
    VerifiableCredentialCreateOptionsData options
  );
  VerifiableCredentialData get_data();
  [Throws=Web5Error, Name=from_vc_jwt]
  constructor(string vc_jwt, boolean verify);
  [Throws=Web5Error]
  string sign(BearerDid bearer_did, string? verification_method_id);
};

dictionary VerifiableCredentialData {
  sequence<string> context;
  sequence<string> type;
  string id;
  string json_serialized_issuer;
  string json_serialized_credential_subject;
  timestamp issuance_date;
  timestamp? expiration_date;
};