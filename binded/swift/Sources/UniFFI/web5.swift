// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(web5FFI)
import web5FFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_web5_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_web5_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol BearerDidProtocol : AnyObject {
    
    func sign(keySelector: KeySelector, payload: [UInt8]) throws  -> Data
    
}

open class BearerDid:
    BearerDidProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_web5_fn_clone_bearerdid(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_web5_fn_free_bearerdid(pointer, $0) }
    }

    

    
open func sign(keySelector: KeySelector, payload: [UInt8])throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeBearerDidError.lift) {
    uniffi_web5_fn_method_bearerdid_sign(self.uniffiClonePointer(),
        FfiConverterTypeKeySelector.lower(keySelector),
        FfiConverterSequenceUInt8.lower(payload),$0
    )
})
}
    

}

public struct FfiConverterTypeBearerDid: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BearerDid

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BearerDid {
        return BearerDid(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BearerDid) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BearerDid {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BearerDid, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeBearerDid_lift(_ pointer: UnsafeMutableRawPointer) throws -> BearerDid {
    return try FfiConverterTypeBearerDid.lift(pointer)
}

public func FfiConverterTypeBearerDid_lower(_ value: BearerDid) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBearerDid.lower(value)
}




public protocol ClaimsProtocol : AnyObject {
    
    func encode() throws  -> String
    
    func sign(bearerDid: BearerDid, keySelector: KeySelector) throws  -> String
    
}

open class Claims:
    ClaimsProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_web5_fn_clone_claims(self.pointer, $0) }
    }
public convenience init(issuer: String?, subject: String?, audience: String?, expiration: Int64?, notBefore: Int64?, issuedAt: Int64?, jti: String?) {
    let pointer =
        try! rustCall() {
    uniffi_web5_fn_constructor_claims_new(
        FfiConverterOptionString.lower(issuer),
        FfiConverterOptionString.lower(subject),
        FfiConverterOptionString.lower(audience),
        FfiConverterOptionInt64.lower(expiration),
        FfiConverterOptionInt64.lower(notBefore),
        FfiConverterOptionInt64.lower(issuedAt),
        FfiConverterOptionString.lower(jti),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_web5_fn_free_claims(pointer, $0) }
    }

    

    
open func encode()throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeJwtError.lift) {
    uniffi_web5_fn_method_claims_encode(self.uniffiClonePointer(),$0
    )
})
}
    
open func sign(bearerDid: BearerDid, keySelector: KeySelector)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeJwtError.lift) {
    uniffi_web5_fn_method_claims_sign(self.uniffiClonePointer(),
        FfiConverterTypeBearerDid.lower(bearerDid),
        FfiConverterTypeKeySelector.lower(keySelector),$0
    )
})
}
    

}

public struct FfiConverterTypeClaims: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Claims

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Claims {
        return Claims(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Claims) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Claims {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Claims, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeClaims_lift(_ pointer: UnsafeMutableRawPointer) throws -> Claims {
    return try FfiConverterTypeClaims.lift(pointer)
}

public func FfiConverterTypeClaims_lower(_ value: Claims) -> UnsafeMutableRawPointer {
    return FfiConverterTypeClaims.lower(value)
}




public protocol InMemoryKeyStoreProtocol : AnyObject {
    
    func exportPrivateKeys() throws  -> [PrivateKey]
    
    func generateNew(curve: Curve, keyAlias: String?) throws  -> String
    
    func getAllAliases() throws  -> [String]
    
    func getPublicKey(keyAlias: String) throws  -> PublicKey
    
    func importPrivateKeys(privateKeys: [PrivateKey]) throws 
    
    func sign(keyAlias: String, payload: [UInt8]) throws  -> Data
    
}

open class InMemoryKeyStore:
    InMemoryKeyStoreProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_web5_fn_clone_inmemorykeystore(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_web5_fn_constructor_inmemorykeystore_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_web5_fn_free_inmemorykeystore(pointer, $0) }
    }

    

    
open func exportPrivateKeys()throws  -> [PrivateKey] {
    return try  FfiConverterSequenceTypePrivateKey.lift(try rustCallWithError(FfiConverterTypeKeyStoreError.lift) {
    uniffi_web5_fn_method_inmemorykeystore_export_private_keys(self.uniffiClonePointer(),$0
    )
})
}
    
open func generateNew(curve: Curve, keyAlias: String?)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeKeyStoreError.lift) {
    uniffi_web5_fn_method_inmemorykeystore_generate_new(self.uniffiClonePointer(),
        FfiConverterTypeCurve.lower(curve),
        FfiConverterOptionString.lower(keyAlias),$0
    )
})
}
    
open func getAllAliases()throws  -> [String] {
    return try  FfiConverterSequenceString.lift(try rustCallWithError(FfiConverterTypeKeyStoreError.lift) {
    uniffi_web5_fn_method_inmemorykeystore_get_all_aliases(self.uniffiClonePointer(),$0
    )
})
}
    
open func getPublicKey(keyAlias: String)throws  -> PublicKey {
    return try  FfiConverterTypePublicKey.lift(try rustCallWithError(FfiConverterTypeKeyStoreError.lift) {
    uniffi_web5_fn_method_inmemorykeystore_get_public_key(self.uniffiClonePointer(),
        FfiConverterString.lower(keyAlias),$0
    )
})
}
    
open func importPrivateKeys(privateKeys: [PrivateKey])throws  {try rustCallWithError(FfiConverterTypeKeyStoreError.lift) {
    uniffi_web5_fn_method_inmemorykeystore_import_private_keys(self.uniffiClonePointer(),
        FfiConverterSequenceTypePrivateKey.lower(privateKeys),$0
    )
}
}
    
open func sign(keyAlias: String, payload: [UInt8])throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeKeyStoreError.lift) {
    uniffi_web5_fn_method_inmemorykeystore_sign(self.uniffiClonePointer(),
        FfiConverterString.lower(keyAlias),
        FfiConverterSequenceUInt8.lower(payload),$0
    )
})
}
    

}

public struct FfiConverterTypeInMemoryKeyStore: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = InMemoryKeyStore

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> InMemoryKeyStore {
        return InMemoryKeyStore(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: InMemoryKeyStore) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InMemoryKeyStore {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: InMemoryKeyStore, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeInMemoryKeyStore_lift(_ pointer: UnsafeMutableRawPointer) throws -> InMemoryKeyStore {
    return try FfiConverterTypeInMemoryKeyStore.lift(pointer)
}

public func FfiConverterTypeInMemoryKeyStore_lower(_ value: InMemoryKeyStore) -> UnsafeMutableRawPointer {
    return FfiConverterTypeInMemoryKeyStore.lower(value)
}




public protocol JwkProtocol : AnyObject {
    
    func alias() throws  -> String
    
    func computeThumbprint() throws  -> String
    
    func jwk() throws  -> Jwk
    
    func sign(payload: [UInt8]) throws  -> Data
    
    func toPublic() throws  -> PublicKey
    
    func verify(payload: [UInt8], signature: [UInt8]) throws 
    
}

open class Jwk:
    JwkProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_web5_fn_clone_jwk(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_web5_fn_free_jwk(pointer, $0) }
    }

    

    
open func alias()throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_web5_fn_method_jwk_alias(self.uniffiClonePointer(),$0
    )
})
}
    
open func computeThumbprint()throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeJwkError.lift) {
    uniffi_web5_fn_method_jwk_compute_thumbprint(self.uniffiClonePointer(),$0
    )
})
}
    
open func jwk()throws  -> Jwk {
    return try  FfiConverterTypeJwk.lift(try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_web5_fn_method_jwk_jwk(self.uniffiClonePointer(),$0
    )
})
}
    
open func sign(payload: [UInt8])throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_web5_fn_method_jwk_sign(self.uniffiClonePointer(),
        FfiConverterSequenceUInt8.lower(payload),$0
    )
})
}
    
open func toPublic()throws  -> PublicKey {
    return try  FfiConverterTypePublicKey.lift(try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_web5_fn_method_jwk_to_public(self.uniffiClonePointer(),$0
    )
})
}
    
open func verify(payload: [UInt8], signature: [UInt8])throws  {try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_web5_fn_method_jwk_verify(self.uniffiClonePointer(),
        FfiConverterSequenceUInt8.lower(payload),
        FfiConverterSequenceUInt8.lower(signature),$0
    )
}
}
    

}

public struct FfiConverterTypeJwk: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Jwk

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Jwk {
        return Jwk(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Jwk) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Jwk {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Jwk, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeJwk_lift(_ pointer: UnsafeMutableRawPointer) throws -> Jwk {
    return try FfiConverterTypeJwk.lift(pointer)
}

public func FfiConverterTypeJwk_lower(_ value: Jwk) -> UnsafeMutableRawPointer {
    return FfiConverterTypeJwk.lower(value)
}




public protocol KeyProtocol : AnyObject {
    
    func alias() throws  -> String
    
    func jwk() throws  -> Jwk
    
}

open class Key:
    KeyProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_web5_fn_clone_key(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_web5_fn_free_key(pointer, $0) }
    }

    

    
open func alias()throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_web5_fn_method_key_alias(self.uniffiClonePointer(),$0
    )
})
}
    
open func jwk()throws  -> Jwk {
    return try  FfiConverterTypeJwk.lift(try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_web5_fn_method_key_jwk(self.uniffiClonePointer(),$0
    )
})
}
    

}

public struct FfiConverterTypeKey: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Key

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Key {
        return Key(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Key) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Key {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Key, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeKey_lift(_ pointer: UnsafeMutableRawPointer) throws -> Key {
    return try FfiConverterTypeKey.lift(pointer)
}

public func FfiConverterTypeKey_lower(_ value: Key) -> UnsafeMutableRawPointer {
    return FfiConverterTypeKey.lower(value)
}




public protocol KeyManagerProtocol : AnyObject {
    
    func exportPrivateKeys() throws  -> [PrivateKey]
    
    func generatePrivateKey(curve: Curve, keyAlias: String?) throws  -> String
    
    func getPublicKey(keyAlias: String) throws  -> PublicKey
    
    func importPrivateKeys(privateKeys: [PrivateKey]) throws 
    
    func sign(keyAlias: String, payload: [UInt8]) throws  -> Data
    
}

open class KeyManager:
    KeyManagerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_web5_fn_clone_keymanager(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_web5_fn_free_keymanager(pointer, $0) }
    }

    

    
open func exportPrivateKeys()throws  -> [PrivateKey] {
    return try  FfiConverterSequenceTypePrivateKey.lift(try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_keymanager_export_private_keys(self.uniffiClonePointer(),$0
    )
})
}
    
open func generatePrivateKey(curve: Curve, keyAlias: String?)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_keymanager_generate_private_key(self.uniffiClonePointer(),
        FfiConverterTypeCurve.lower(curve),
        FfiConverterOptionString.lower(keyAlias),$0
    )
})
}
    
open func getPublicKey(keyAlias: String)throws  -> PublicKey {
    return try  FfiConverterTypePublicKey.lift(try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_keymanager_get_public_key(self.uniffiClonePointer(),
        FfiConverterString.lower(keyAlias),$0
    )
})
}
    
open func importPrivateKeys(privateKeys: [PrivateKey])throws  {try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_keymanager_import_private_keys(self.uniffiClonePointer(),
        FfiConverterSequenceTypePrivateKey.lower(privateKeys),$0
    )
}
}
    
open func sign(keyAlias: String, payload: [UInt8])throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_keymanager_sign(self.uniffiClonePointer(),
        FfiConverterString.lower(keyAlias),
        FfiConverterSequenceUInt8.lower(payload),$0
    )
})
}
    

}

public struct FfiConverterTypeKeyManager: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = KeyManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> KeyManager {
        return KeyManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: KeyManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: KeyManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeKeyManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> KeyManager {
    return try FfiConverterTypeKeyManager.lift(pointer)
}

public func FfiConverterTypeKeyManager_lower(_ value: KeyManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeKeyManager.lower(value)
}




public protocol KeyStoreProtocol : AnyObject {
    
    func exportPrivateKeys() throws  -> [PrivateKey]
    
    func generateNew(curve: Curve, keyAlias: String?) throws  -> String
    
    func getAllAliases() throws  -> [String]
    
    func getPublicKey(keyAlias: String) throws  -> PublicKey
    
    func importPrivateKeys(privateKeys: [PrivateKey]) throws 
    
    func sign(keyAlias: String, payload: [UInt8]) throws  -> Data
    
}

open class KeyStore:
    KeyStoreProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_web5_fn_clone_keystore(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_web5_fn_free_keystore(pointer, $0) }
    }

    

    
open func exportPrivateKeys()throws  -> [PrivateKey] {
    return try  FfiConverterSequenceTypePrivateKey.lift(try rustCallWithError(FfiConverterTypeKeyStoreError.lift) {
    uniffi_web5_fn_method_keystore_export_private_keys(self.uniffiClonePointer(),$0
    )
})
}
    
open func generateNew(curve: Curve, keyAlias: String?)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeKeyStoreError.lift) {
    uniffi_web5_fn_method_keystore_generate_new(self.uniffiClonePointer(),
        FfiConverterTypeCurve.lower(curve),
        FfiConverterOptionString.lower(keyAlias),$0
    )
})
}
    
open func getAllAliases()throws  -> [String] {
    return try  FfiConverterSequenceString.lift(try rustCallWithError(FfiConverterTypeKeyStoreError.lift) {
    uniffi_web5_fn_method_keystore_get_all_aliases(self.uniffiClonePointer(),$0
    )
})
}
    
open func getPublicKey(keyAlias: String)throws  -> PublicKey {
    return try  FfiConverterTypePublicKey.lift(try rustCallWithError(FfiConverterTypeKeyStoreError.lift) {
    uniffi_web5_fn_method_keystore_get_public_key(self.uniffiClonePointer(),
        FfiConverterString.lower(keyAlias),$0
    )
})
}
    
open func importPrivateKeys(privateKeys: [PrivateKey])throws  {try rustCallWithError(FfiConverterTypeKeyStoreError.lift) {
    uniffi_web5_fn_method_keystore_import_private_keys(self.uniffiClonePointer(),
        FfiConverterSequenceTypePrivateKey.lower(privateKeys),$0
    )
}
}
    
open func sign(keyAlias: String, payload: [UInt8])throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeKeyStoreError.lift) {
    uniffi_web5_fn_method_keystore_sign(self.uniffiClonePointer(),
        FfiConverterString.lower(keyAlias),
        FfiConverterSequenceUInt8.lower(payload),$0
    )
})
}
    

}

public struct FfiConverterTypeKeyStore: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = KeyStore

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> KeyStore {
        return KeyStore(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: KeyStore) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyStore {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: KeyStore, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeKeyStore_lift(_ pointer: UnsafeMutableRawPointer) throws -> KeyStore {
    return try FfiConverterTypeKeyStore.lift(pointer)
}

public func FfiConverterTypeKeyStore_lower(_ value: KeyStore) -> UnsafeMutableRawPointer {
    return FfiConverterTypeKeyStore.lower(value)
}




public protocol LocalKeyManagerProtocol : AnyObject {
    
    func exportPrivateKeys() throws  -> [PrivateKey]
    
    func generatePrivateKey(curve: Curve, keyAlias: String?) throws  -> String
    
    func getPublicKey(keyAlias: String) throws  -> PublicKey
    
    func importPrivateKeys(privateKeys: [PrivateKey]) throws 
    
    func sign(keyAlias: String, payload: [UInt8]) throws  -> Data
    
}

open class LocalKeyManager:
    LocalKeyManagerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_web5_fn_clone_localkeymanager(self.pointer, $0) }
    }
public convenience init(keyStore: KeyStore) {
    let pointer =
        try! rustCall() {
    uniffi_web5_fn_constructor_localkeymanager_new(
        FfiConverterTypeKeyStore.lower(keyStore),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_web5_fn_free_localkeymanager(pointer, $0) }
    }

    
public static func newInMemory() -> LocalKeyManager {
    return try!  FfiConverterTypeLocalKeyManager.lift(try! rustCall() {
    uniffi_web5_fn_constructor_localkeymanager_new_in_memory($0
    )
})
}
    

    
open func exportPrivateKeys()throws  -> [PrivateKey] {
    return try  FfiConverterSequenceTypePrivateKey.lift(try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_localkeymanager_export_private_keys(self.uniffiClonePointer(),$0
    )
})
}
    
open func generatePrivateKey(curve: Curve, keyAlias: String?)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_localkeymanager_generate_private_key(self.uniffiClonePointer(),
        FfiConverterTypeCurve.lower(curve),
        FfiConverterOptionString.lower(keyAlias),$0
    )
})
}
    
open func getPublicKey(keyAlias: String)throws  -> PublicKey {
    return try  FfiConverterTypePublicKey.lift(try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_localkeymanager_get_public_key(self.uniffiClonePointer(),
        FfiConverterString.lower(keyAlias),$0
    )
})
}
    
open func importPrivateKeys(privateKeys: [PrivateKey])throws  {try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_localkeymanager_import_private_keys(self.uniffiClonePointer(),
        FfiConverterSequenceTypePrivateKey.lower(privateKeys),$0
    )
}
}
    
open func sign(keyAlias: String, payload: [UInt8])throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeKeyManagerError.lift) {
    uniffi_web5_fn_method_localkeymanager_sign(self.uniffiClonePointer(),
        FfiConverterString.lower(keyAlias),
        FfiConverterSequenceUInt8.lower(payload),$0
    )
})
}
    

}

public struct FfiConverterTypeLocalKeyManager: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LocalKeyManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LocalKeyManager {
        return LocalKeyManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LocalKeyManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LocalKeyManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LocalKeyManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeLocalKeyManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> LocalKeyManager {
    return try FfiConverterTypeLocalKeyManager.lift(pointer)
}

public func FfiConverterTypeLocalKeyManager_lower(_ value: LocalKeyManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLocalKeyManager.lower(value)
}




public protocol PrivateKeyProtocol : AnyObject {
    
    func sign(payload: [UInt8]) throws  -> Data
    
    func toPublic() throws  -> PublicKey
    
}

open class PrivateKey:
    PrivateKeyProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_web5_fn_clone_privatekey(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_web5_fn_free_privatekey(pointer, $0) }
    }

    

    
open func sign(payload: [UInt8])throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_web5_fn_method_privatekey_sign(self.uniffiClonePointer(),
        FfiConverterSequenceUInt8.lower(payload),$0
    )
})
}
    
open func toPublic()throws  -> PublicKey {
    return try  FfiConverterTypePublicKey.lift(try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_web5_fn_method_privatekey_to_public(self.uniffiClonePointer(),$0
    )
})
}
    

}

public struct FfiConverterTypePrivateKey: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PrivateKey

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PrivateKey {
        return PrivateKey(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PrivateKey) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrivateKey {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PrivateKey, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypePrivateKey_lift(_ pointer: UnsafeMutableRawPointer) throws -> PrivateKey {
    return try FfiConverterTypePrivateKey.lift(pointer)
}

public func FfiConverterTypePrivateKey_lower(_ value: PrivateKey) -> UnsafeMutableRawPointer {
    return FfiConverterTypePrivateKey.lower(value)
}




public protocol PublicKeyProtocol : AnyObject {
    
    func verify(payload: [UInt8], signature: [UInt8]) throws 
    
}

open class PublicKey:
    PublicKeyProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_web5_fn_clone_publickey(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_web5_fn_free_publickey(pointer, $0) }
    }

    

    
open func verify(payload: [UInt8], signature: [UInt8])throws  {try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_web5_fn_method_publickey_verify(self.uniffiClonePointer(),
        FfiConverterSequenceUInt8.lower(payload),
        FfiConverterSequenceUInt8.lower(signature),$0
    )
}
}
    

}

public struct FfiConverterTypePublicKey: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PublicKey

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PublicKey {
        return PublicKey(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PublicKey) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKey {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PublicKey, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypePublicKey_lift(_ pointer: UnsafeMutableRawPointer) throws -> PublicKey {
    return try FfiConverterTypePublicKey.lift(pointer)
}

public func FfiConverterTypePublicKey_lower(_ value: PublicKey) -> UnsafeMutableRawPointer {
    return FfiConverterTypePublicKey.lower(value)
}




public protocol VerifiableCredentialProtocol : AnyObject {
    
    func sign(bearerDid: BearerDid, keySelector: KeySelector) throws  -> String
    
}

open class VerifiableCredential:
    VerifiableCredentialProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_web5_fn_clone_verifiablecredential(self.pointer, $0) }
    }
public convenience init(context: [String], id: String, type: [String], issuer: String, issuanceDate: Int64, expirationDate: Int64?, credentialSubject: CredentialSubject, evidenceJson: String?)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeCredentialError.lift) {
    uniffi_web5_fn_constructor_verifiablecredential_new(
        FfiConverterSequenceString.lower(context),
        FfiConverterString.lower(id),
        FfiConverterSequenceString.lower(type),
        FfiConverterString.lower(issuer),
        FfiConverterInt64.lower(issuanceDate),
        FfiConverterOptionInt64.lower(expirationDate),
        FfiConverterTypeCredentialSubject.lower(credentialSubject),
        FfiConverterOptionString.lower(evidenceJson),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_web5_fn_free_verifiablecredential(pointer, $0) }
    }

    

    
open func sign(bearerDid: BearerDid, keySelector: KeySelector)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeCredentialError.lift) {
    uniffi_web5_fn_method_verifiablecredential_sign(self.uniffiClonePointer(),
        FfiConverterTypeBearerDid.lower(bearerDid),
        FfiConverterTypeKeySelector.lower(keySelector),$0
    )
})
}
    

}

public struct FfiConverterTypeVerifiableCredential: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = VerifiableCredential

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> VerifiableCredential {
        return VerifiableCredential(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: VerifiableCredential) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VerifiableCredential {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: VerifiableCredential, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeVerifiableCredential_lift(_ pointer: UnsafeMutableRawPointer) throws -> VerifiableCredential {
    return try FfiConverterTypeVerifiableCredential.lift(pointer)
}

public func FfiConverterTypeVerifiableCredential_lower(_ value: VerifiableCredential) -> UnsafeMutableRawPointer {
    return FfiConverterTypeVerifiableCredential.lower(value)
}


public struct CredentialSubject {
    public var id: String
    public var params: [String: String]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, params: [String: String]?) {
        self.id = id
        self.params = params
    }
}



extension CredentialSubject: Equatable, Hashable {
    public static func ==(lhs: CredentialSubject, rhs: CredentialSubject) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.params != rhs.params {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(params)
    }
}


public struct FfiConverterTypeCredentialSubject: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialSubject {
        return
            try CredentialSubject(
                id: FfiConverterString.read(from: &buf), 
                params: FfiConverterOptionDictionaryStringString.read(from: &buf)
        )
    }

    public static func write(_ value: CredentialSubject, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.params, into: &buf)
    }
}


public func FfiConverterTypeCredentialSubject_lift(_ buf: RustBuffer) throws -> CredentialSubject {
    return try FfiConverterTypeCredentialSubject.lift(buf)
}

public func FfiConverterTypeCredentialSubject_lower(_ value: CredentialSubject) -> RustBuffer {
    return FfiConverterTypeCredentialSubject.lower(value)
}


public enum BearerDidError {

    
    
    case VerificationMethodNotFound(message: String)
    
    case KeyManagerError(message: String)
    
    case KeyError(message: String)
    
    case DocumentError(message: String)
    
    case ResolutionError(message: String)
    
    case IdentifierError(message: String)
    
}


public struct FfiConverterTypeBearerDidError: FfiConverterRustBuffer {
    typealias SwiftType = BearerDidError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BearerDidError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .VerificationMethodNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .KeyManagerError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .KeyError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .DocumentError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .ResolutionError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .IdentifierError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BearerDidError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .VerificationMethodNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .KeyManagerError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .KeyError(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .DocumentError(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .ResolutionError(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .IdentifierError(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))

        
        }
    }
}


extension BearerDidError: Equatable, Hashable {}

extension BearerDidError: Error { }


public enum CredentialError {

    
    
    case JwtError(message: String)
    
    case JwsError(message: String)
    
    case EvidenceParsingError(message: String)
    
}


public struct FfiConverterTypeCredentialError: FfiConverterRustBuffer {
    typealias SwiftType = CredentialError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .JwtError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .JwsError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .EvidenceParsingError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CredentialError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .JwtError(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .JwsError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .EvidenceParsingError(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))

        
        }
    }
}


extension CredentialError: Equatable, Hashable {}

extension CredentialError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Curve {
    
    case secp256k1
    case ed25519
}


public struct FfiConverterTypeCurve: FfiConverterRustBuffer {
    typealias SwiftType = Curve

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Curve {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .secp256k1
        
        case 2: return .ed25519
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Curve, into buf: inout [UInt8]) {
        switch value {
        
        
        case .secp256k1:
            writeInt(&buf, Int32(1))
        
        
        case .ed25519:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeCurve_lift(_ buf: RustBuffer) throws -> Curve {
    return try FfiConverterTypeCurve.lift(buf)
}

public func FfiConverterTypeCurve_lower(_ value: Curve) -> RustBuffer {
    return FfiConverterTypeCurve.lower(value)
}



extension Curve: Equatable, Hashable {}




public enum JwkError {

    
    
    case ThumbprintFailed(message: String)
    
}


public struct FfiConverterTypeJwkError: FfiConverterRustBuffer {
    typealias SwiftType = JwkError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> JwkError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ThumbprintFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: JwkError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .ThumbprintFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))

        
        }
    }
}


extension JwkError: Equatable, Hashable {}

extension JwkError: Error { }


public enum JwtError {

    
    
    case JwsError(message: String)
    
    case SerializationError(message: String)
    
    case DeserializationError(message: String)
    
}


public struct FfiConverterTypeJwtError: FfiConverterRustBuffer {
    typealias SwiftType = JwtError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> JwtError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .JwsError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .SerializationError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .DeserializationError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: JwtError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .JwsError(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .SerializationError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .DeserializationError(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))

        
        }
    }
}


extension JwtError: Equatable, Hashable {}

extension JwtError: Error { }


public enum KeyError {

    
    
    case KeyGenerationFailed(message: String)
    
    case SerializationFailed(message: String)
    
    case CurveNotFound(message: String)
    
    case AlgorithmNotFound(message: String)
    
    case JwkError(message: String)
    
    case CryptoError(message: String)
    
}


public struct FfiConverterTypeKeyError: FfiConverterRustBuffer {
    typealias SwiftType = KeyError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .KeyGenerationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .SerializationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .CurveNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .AlgorithmNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .JwkError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .CryptoError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KeyError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .KeyGenerationFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .SerializationFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .CurveNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .AlgorithmNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .JwkError(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .CryptoError(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))

        
        }
    }
}


extension KeyError: Equatable, Hashable {}

extension KeyError: Error { }


public enum KeyManagerError {

    
    
    case KeyGenerationFailed(message: String)
    
    case SigningKeyNotFound(message: String)
    
    case KeyError(message: String)
    
    case KeyStoreError(message: String)
    
}


public struct FfiConverterTypeKeyManagerError: FfiConverterRustBuffer {
    typealias SwiftType = KeyManagerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyManagerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .KeyGenerationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .SigningKeyNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .KeyError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .KeyStoreError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KeyManagerError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .KeyGenerationFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .SigningKeyNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .KeyError(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .KeyStoreError(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))

        
        }
    }
}


extension KeyManagerError: Equatable, Hashable {}

extension KeyManagerError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum KeySelector {
    
    case keyId(keyId: String
    )
    case methodType(verificationMethodType: VerificationMethodType
    )
}


public struct FfiConverterTypeKeySelector: FfiConverterRustBuffer {
    typealias SwiftType = KeySelector

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeySelector {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .keyId(keyId: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .methodType(verificationMethodType: try FfiConverterTypeVerificationMethodType.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KeySelector, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .keyId(keyId):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(keyId, into: &buf)
            
        
        case let .methodType(verificationMethodType):
            writeInt(&buf, Int32(2))
            FfiConverterTypeVerificationMethodType.write(verificationMethodType, into: &buf)
            
        }
    }
}


public func FfiConverterTypeKeySelector_lift(_ buf: RustBuffer) throws -> KeySelector {
    return try FfiConverterTypeKeySelector.lift(buf)
}

public func FfiConverterTypeKeySelector_lower(_ value: KeySelector) -> RustBuffer {
    return FfiConverterTypeKeySelector.lower(value)
}



extension KeySelector: Equatable, Hashable {}




public enum KeyStoreError {

    
    
    case InternalKeyStoreError(message: String)
    
    case KeyError(message: String)
    
    case KeyNotFound(message: String)
    
    case CryptoError(message: String)
    
    case JwkError(message: String)
    
    case UnsupportedOperation(message: String)
    
}


public struct FfiConverterTypeKeyStoreError: FfiConverterRustBuffer {
    typealias SwiftType = KeyStoreError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyStoreError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InternalKeyStoreError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .KeyError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .KeyNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .CryptoError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .JwkError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .UnsupportedOperation(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KeyStoreError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .InternalKeyStoreError(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .KeyError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .KeyNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .CryptoError(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .JwkError(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .UnsupportedOperation(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))

        
        }
    }
}


extension KeyStoreError: Equatable, Hashable {}

extension KeyStoreError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum VerificationMethodType {
    
    case verificationMethod
    case assertionMethod
    case authentication
    case capabilityDelegation
    case capabilityInvocation
}


public struct FfiConverterTypeVerificationMethodType: FfiConverterRustBuffer {
    typealias SwiftType = VerificationMethodType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VerificationMethodType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .verificationMethod
        
        case 2: return .assertionMethod
        
        case 3: return .authentication
        
        case 4: return .capabilityDelegation
        
        case 5: return .capabilityInvocation
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VerificationMethodType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .verificationMethod:
            writeInt(&buf, Int32(1))
        
        
        case .assertionMethod:
            writeInt(&buf, Int32(2))
        
        
        case .authentication:
            writeInt(&buf, Int32(3))
        
        
        case .capabilityDelegation:
            writeInt(&buf, Int32(4))
        
        
        case .capabilityInvocation:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeVerificationMethodType_lift(_ buf: RustBuffer) throws -> VerificationMethodType {
    return try FfiConverterTypeVerificationMethodType.lift(buf)
}

public func FfiConverterTypeVerificationMethodType_lower(_ value: VerificationMethodType) -> RustBuffer {
    return FfiConverterTypeVerificationMethodType.lower(value)
}



extension VerificationMethodType: Equatable, Hashable {}



fileprivate struct FfiConverterOptionInt64: FfiConverterRustBuffer {
    typealias SwiftType = Int64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionDictionaryStringString: FfiConverterRustBuffer {
    typealias SwiftType = [String: String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePrivateKey: FfiConverterRustBuffer {
    typealias SwiftType = [PrivateKey]

    public static func write(_ value: [PrivateKey], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePrivateKey.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PrivateKey] {
        let len: Int32 = try readInt(&buf)
        var seq = [PrivateKey]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePrivateKey.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}
public func bearerDidFromKeyManager(didUri: String, keyManager: KeyManager)async throws  -> BearerDid {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_web5_fn_func_bearer_did_from_key_manager(FfiConverterString.lower(didUri),FfiConverterTypeKeyManager.lower(keyManager)
                )
            },
            pollFunc: ffi_web5_rust_future_poll_pointer,
            completeFunc: ffi_web5_rust_future_complete_pointer,
            freeFunc: ffi_web5_rust_future_free_pointer,
            liftFunc: FfiConverterTypeBearerDid.lift,
            errorHandler: FfiConverterTypeBearerDidError.lift
        )
}
public func signJwt(bearerDid: BearerDid, keySelector: KeySelector, encodedHeader: String, encodedPayload: String)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeJwtError.lift) {
    uniffi_web5_fn_func_sign_jwt(
        FfiConverterTypeBearerDid.lower(bearerDid),
        FfiConverterTypeKeySelector.lower(keySelector),
        FfiConverterString.lower(encodedHeader),
        FfiConverterString.lower(encodedPayload),$0
    )
})
}
public func verifyJwt(jwt: String)async throws  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_web5_fn_func_verify_jwt(FfiConverterString.lower(jwt)
                )
            },
            pollFunc: ffi_web5_rust_future_poll_void,
            completeFunc: ffi_web5_rust_future_complete_void,
            freeFunc: ffi_web5_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeJwtError.lift
        )
}
public func verifyVcjwt(jwt: String)async throws  -> VerifiableCredential {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_web5_fn_func_verify_vcjwt(FfiConverterString.lower(jwt)
                )
            },
            pollFunc: ffi_web5_rust_future_poll_pointer,
            completeFunc: ffi_web5_rust_future_complete_pointer,
            freeFunc: ffi_web5_rust_future_free_pointer,
            liftFunc: FfiConverterTypeVerifiableCredential.lift,
            errorHandler: FfiConverterTypeCredentialError.lift
        )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_web5_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_web5_checksum_func_bearer_did_from_key_manager() != 49693) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_func_sign_jwt() != 3714) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_func_verify_jwt() != 15697) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_func_verify_vcjwt() != 20360) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_bearerdid_sign() != 16617) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_claims_encode() != 57871) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_claims_sign() != 25723) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_inmemorykeystore_export_private_keys() != 39747) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_inmemorykeystore_generate_new() != 38125) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_inmemorykeystore_get_all_aliases() != 5037) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_inmemorykeystore_get_public_key() != 29662) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_inmemorykeystore_import_private_keys() != 30093) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_inmemorykeystore_sign() != 16944) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_jwk_alias() != 49978) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_jwk_compute_thumbprint() != 48815) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_jwk_jwk() != 5992) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_jwk_sign() != 61337) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_jwk_to_public() != 29912) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_jwk_verify() != 11302) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_key_alias() != 42841) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_key_jwk() != 56821) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_keymanager_export_private_keys() != 21330) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_keymanager_generate_private_key() != 37489) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_keymanager_get_public_key() != 33063) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_keymanager_import_private_keys() != 17034) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_keymanager_sign() != 60994) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_keystore_export_private_keys() != 51959) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_keystore_generate_new() != 11193) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_keystore_get_all_aliases() != 38081) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_keystore_get_public_key() != 2805) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_keystore_import_private_keys() != 4940) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_keystore_sign() != 52791) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_localkeymanager_export_private_keys() != 123) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_localkeymanager_generate_private_key() != 44974) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_localkeymanager_get_public_key() != 10967) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_localkeymanager_import_private_keys() != 16228) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_localkeymanager_sign() != 33139) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_privatekey_sign() != 45053) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_privatekey_to_public() != 39125) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_publickey_verify() != 12448) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_method_verifiablecredential_sign() != 29352) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_constructor_claims_new() != 1059) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_constructor_inmemorykeystore_new() != 52462) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_constructor_localkeymanager_new() != 2661) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_constructor_localkeymanager_new_in_memory() != 62693) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_web5_checksum_constructor_verifiablecredential_new() != 56116) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all