{
  "version": 3,
  "sources": ["../../../../node_modules/assertion-error/index.js", "../../../../node_modules/pathval/index.js", "../../../../node_modules/chai/lib/chai/utils/flag.js", "../../../../node_modules/chai/lib/chai/utils/test.js", "../../../../node_modules/type-detect/type-detect.js", "../../../../node_modules/chai/lib/chai/utils/expectTypes.js", "../../../../node_modules/chai/lib/chai/utils/getActual.js", "../../../../node_modules/get-func-name/index.js", "../../../../node_modules/loupe/loupe.js", "../../../../node_modules/chai/lib/chai/config.js", "../../../../node_modules/chai/lib/chai/utils/inspect.js", "../../../../node_modules/chai/lib/chai/utils/objDisplay.js", "../../../../node_modules/chai/lib/chai/utils/getMessage.js", "../../../../node_modules/chai/lib/chai/utils/transferFlags.js", "../../../../node_modules/deep-eql/index.js", "../../../../node_modules/chai/lib/chai/utils/isProxyEnabled.js", "../../../../node_modules/chai/lib/chai/utils/addProperty.js", "../../../../node_modules/chai/lib/chai/utils/addLengthGuard.js", "../../../../node_modules/chai/lib/chai/utils/getProperties.js", "../../../../node_modules/chai/lib/chai/utils/proxify.js", "../../../../node_modules/chai/lib/chai/utils/addMethod.js", "../../../../node_modules/chai/lib/chai/utils/overwriteProperty.js", "../../../../node_modules/chai/lib/chai/utils/overwriteMethod.js", "../../../../node_modules/chai/lib/chai/utils/addChainableMethod.js", "../../../../node_modules/chai/lib/chai/utils/overwriteChainableMethod.js", "../../../../node_modules/chai/lib/chai/utils/compareByInspect.js", "../../../../node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js", "../../../../node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js", "../../../../node_modules/check-error/index.js", "../../../../node_modules/chai/lib/chai/utils/isNaN.js", "../../../../node_modules/chai/lib/chai/utils/getOperator.js", "../../../../node_modules/chai/lib/chai/utils/index.js", "../../../../node_modules/chai/lib/chai/assertion.js", "../../../../node_modules/chai/lib/chai/core/assertions.js", "../../../../node_modules/chai/lib/chai/interface/expect.js", "../../../../node_modules/chai/lib/chai/interface/should.js", "../../../../node_modules/chai/lib/chai/interface/assert.js", "../../../../node_modules/chai/lib/chai.js", "../../../../node_modules/chai/index.js", "../../../../node_modules/base64url/dist/pad-string.js", "../../../../node_modules/base64url/dist/base64url.js", "../../../../node_modules/base64url/index.js", "../../../../node_modules/chai/index.mjs", "../../../../dist/src/wasm/generated.js", "../../../../dist/src/wasm/index.ts", "../../../../dist/src/errors.js", "../../../../dist/src/crypto/jwk.js", "../../../../dist/src/crypto/dsa/index.js", "../../../../dist/src/crypto/dsa/ed25519.js", "../../../../dist/tests/crypto/dsa/ed25519.test.js"],
  "sourcesContent": ["/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || AssertionError;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n", "'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    if (\n      value === 'constructor' ||\n      value === '__proto__' ||\n      value === 'prototype'\n    ) {\n      return {};\n    }\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent:\n      parsed.length > 1 ?\n        internalGetPathValue(obj, parsed, parsed.length - 1) :\n        obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n", "/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n", "/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test an object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n", "(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.typeDetect = factory());\n})(this, (function () { 'use strict';\n\n    var promiseExists = typeof Promise === 'function';\n    var globalObject = (function (Obj) {\n        if (typeof globalThis === 'object') {\n            return globalThis;\n        }\n        Object.defineProperty(Obj, 'typeDetectGlobalObject', {\n            get: function get() {\n                return this;\n            },\n            configurable: true,\n        });\n        var global = typeDetectGlobalObject;\n        delete Obj.typeDetectGlobalObject;\n        return global;\n    })(Object.prototype);\n    var symbolExists = typeof Symbol !== 'undefined';\n    var mapExists = typeof Map !== 'undefined';\n    var setExists = typeof Set !== 'undefined';\n    var weakMapExists = typeof WeakMap !== 'undefined';\n    var weakSetExists = typeof WeakSet !== 'undefined';\n    var dataViewExists = typeof DataView !== 'undefined';\n    var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\n    var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\n    var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\n    var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\n    var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\n    var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\n    var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\n    var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\n    var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\n    var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\n    var toStringLeftSliceLength = 8;\n    var toStringRightSliceLength = -1;\n    function typeDetect(obj) {\n        var typeofObj = typeof obj;\n        if (typeofObj !== 'object') {\n            return typeofObj;\n        }\n        if (obj === null) {\n            return 'null';\n        }\n        if (obj === globalObject) {\n            return 'global';\n        }\n        if (Array.isArray(obj) &&\n            (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))) {\n            return 'Array';\n        }\n        if (typeof window === 'object' && window !== null) {\n            if (typeof window.location === 'object' && obj === window.location) {\n                return 'Location';\n            }\n            if (typeof window.document === 'object' && obj === window.document) {\n                return 'Document';\n            }\n            if (typeof window.navigator === 'object') {\n                if (typeof window.navigator.mimeTypes === 'object' &&\n                    obj === window.navigator.mimeTypes) {\n                    return 'MimeTypeArray';\n                }\n                if (typeof window.navigator.plugins === 'object' &&\n                    obj === window.navigator.plugins) {\n                    return 'PluginArray';\n                }\n            }\n            if ((typeof window.HTMLElement === 'function' ||\n                typeof window.HTMLElement === 'object') &&\n                obj instanceof window.HTMLElement) {\n                if (obj.tagName === 'BLOCKQUOTE') {\n                    return 'HTMLQuoteElement';\n                }\n                if (obj.tagName === 'TD') {\n                    return 'HTMLTableDataCellElement';\n                }\n                if (obj.tagName === 'TH') {\n                    return 'HTMLTableHeaderCellElement';\n                }\n            }\n        }\n        var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n        if (typeof stringTag === 'string') {\n            return stringTag;\n        }\n        var objPrototype = Object.getPrototypeOf(obj);\n        if (objPrototype === RegExp.prototype) {\n            return 'RegExp';\n        }\n        if (objPrototype === Date.prototype) {\n            return 'Date';\n        }\n        if (promiseExists && objPrototype === Promise.prototype) {\n            return 'Promise';\n        }\n        if (setExists && objPrototype === Set.prototype) {\n            return 'Set';\n        }\n        if (mapExists && objPrototype === Map.prototype) {\n            return 'Map';\n        }\n        if (weakSetExists && objPrototype === WeakSet.prototype) {\n            return 'WeakSet';\n        }\n        if (weakMapExists && objPrototype === WeakMap.prototype) {\n            return 'WeakMap';\n        }\n        if (dataViewExists && objPrototype === DataView.prototype) {\n            return 'DataView';\n        }\n        if (mapExists && objPrototype === mapIteratorPrototype) {\n            return 'Map Iterator';\n        }\n        if (setExists && objPrototype === setIteratorPrototype) {\n            return 'Set Iterator';\n        }\n        if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n            return 'Array Iterator';\n        }\n        if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n            return 'String Iterator';\n        }\n        if (objPrototype === null) {\n            return 'Object';\n        }\n        return Object\n            .prototype\n            .toString\n            .call(obj)\n            .slice(toStringLeftSliceLength, toStringRightSliceLength);\n    }\n\n    return typeDetect;\n\n}));\n", "/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n", "/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n", "'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nvar maxFunctionSourceLength = 512;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // eslint-disable-next-line prefer-reflect\n    var functionSource = toString.call(aFunc);\n    // To avoid unconstrained resource consumption due to pathalogically large function names,\n    // we limit the available return value to be less than 512 characters.\n    if (functionSource.indexOf('(') > maxFunctionSourceLength) {\n      return name;\n    }\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = functionSource.match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n", "(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.loupe = {}));\n}(this, (function (exports) { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var ansiColors = {\n    bold: ['1', '22'],\n    dim: ['2', '22'],\n    italic: ['3', '23'],\n    underline: ['4', '24'],\n    // 5 & 6 are blinking\n    inverse: ['7', '27'],\n    hidden: ['8', '28'],\n    strike: ['9', '29'],\n    // 10-20 are fonts\n    // 21-29 are resets for 1-9\n    black: ['30', '39'],\n    red: ['31', '39'],\n    green: ['32', '39'],\n    yellow: ['33', '39'],\n    blue: ['34', '39'],\n    magenta: ['35', '39'],\n    cyan: ['36', '39'],\n    white: ['37', '39'],\n    brightblack: ['30;1', '39'],\n    brightred: ['31;1', '39'],\n    brightgreen: ['32;1', '39'],\n    brightyellow: ['33;1', '39'],\n    brightblue: ['34;1', '39'],\n    brightmagenta: ['35;1', '39'],\n    brightcyan: ['36;1', '39'],\n    brightwhite: ['37;1', '39'],\n    grey: ['90', '39']\n  };\n  var styles = {\n    special: 'cyan',\n    number: 'yellow',\n    bigint: 'yellow',\n    boolean: 'yellow',\n    undefined: 'grey',\n    null: 'bold',\n    string: 'green',\n    symbol: 'green',\n    date: 'magenta',\n    regexp: 'red'\n  };\n  var truncator = '\u2026';\n\n  function colorise(value, styleType) {\n    var color = ansiColors[styles[styleType]] || ansiColors[styleType];\n\n    if (!color) {\n      return String(value);\n    }\n\n    return \"\\x1B[\".concat(color[0], \"m\").concat(String(value), \"\\x1B[\").concat(color[1], \"m\");\n  }\n\n  function normaliseOptions() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$showHidden = _ref.showHidden,\n        showHidden = _ref$showHidden === void 0 ? false : _ref$showHidden,\n        _ref$depth = _ref.depth,\n        depth = _ref$depth === void 0 ? 2 : _ref$depth,\n        _ref$colors = _ref.colors,\n        colors = _ref$colors === void 0 ? false : _ref$colors,\n        _ref$customInspect = _ref.customInspect,\n        customInspect = _ref$customInspect === void 0 ? true : _ref$customInspect,\n        _ref$showProxy = _ref.showProxy,\n        showProxy = _ref$showProxy === void 0 ? false : _ref$showProxy,\n        _ref$maxArrayLength = _ref.maxArrayLength,\n        maxArrayLength = _ref$maxArrayLength === void 0 ? Infinity : _ref$maxArrayLength,\n        _ref$breakLength = _ref.breakLength,\n        breakLength = _ref$breakLength === void 0 ? Infinity : _ref$breakLength,\n        _ref$seen = _ref.seen,\n        seen = _ref$seen === void 0 ? [] : _ref$seen,\n        _ref$truncate = _ref.truncate,\n        truncate = _ref$truncate === void 0 ? Infinity : _ref$truncate,\n        _ref$stylize = _ref.stylize,\n        stylize = _ref$stylize === void 0 ? String : _ref$stylize;\n\n    var options = {\n      showHidden: Boolean(showHidden),\n      depth: Number(depth),\n      colors: Boolean(colors),\n      customInspect: Boolean(customInspect),\n      showProxy: Boolean(showProxy),\n      maxArrayLength: Number(maxArrayLength),\n      breakLength: Number(breakLength),\n      truncate: Number(truncate),\n      seen: seen,\n      stylize: stylize\n    };\n\n    if (options.colors) {\n      options.stylize = colorise;\n    }\n\n    return options;\n  }\n  function truncate(string, length) {\n    var tail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : truncator;\n    string = String(string);\n    var tailLength = tail.length;\n    var stringLength = string.length;\n\n    if (tailLength > length && stringLength > tailLength) {\n      return tail;\n    }\n\n    if (stringLength > length && stringLength > tailLength) {\n      return \"\".concat(string.slice(0, length - tailLength)).concat(tail);\n    }\n\n    return string;\n  } // eslint-disable-next-line complexity\n\n  function inspectList(list, options, inspectItem) {\n    var separator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ', ';\n    inspectItem = inspectItem || options.inspect;\n    var size = list.length;\n    if (size === 0) return '';\n    var originalLength = options.truncate;\n    var output = '';\n    var peek = '';\n    var truncated = '';\n\n    for (var i = 0; i < size; i += 1) {\n      var last = i + 1 === list.length;\n      var secondToLast = i + 2 === list.length;\n      truncated = \"\".concat(truncator, \"(\").concat(list.length - i, \")\");\n      var value = list[i]; // If there is more than one remaining we need to account for a separator of `, `\n\n      options.truncate = originalLength - output.length - (last ? 0 : separator.length);\n      var string = peek || inspectItem(value, options) + (last ? '' : separator);\n      var nextLength = output.length + string.length;\n      var truncatedLength = nextLength + truncated.length; // If this is the last element, and adding it would\n      // take us over length, but adding the truncator wouldn't - then break now\n\n      if (last && nextLength > originalLength && output.length + truncated.length <= originalLength) {\n        break;\n      } // If this isn't the last or second to last element to scan,\n      // but the string is already over length then break here\n\n\n      if (!last && !secondToLast && truncatedLength > originalLength) {\n        break;\n      } // Peek at the next string to determine if we should\n      // break early before adding this item to the output\n\n\n      peek = last ? '' : inspectItem(list[i + 1], options) + (secondToLast ? '' : separator); // If we have one element left, but this element and\n      // the next takes over length, the break early\n\n      if (!last && secondToLast && truncatedLength > originalLength && nextLength + peek.length > originalLength) {\n        break;\n      }\n\n      output += string; // If the next element takes us to length -\n      // but there are more after that, then we should truncate now\n\n      if (!last && !secondToLast && nextLength + peek.length >= originalLength) {\n        truncated = \"\".concat(truncator, \"(\").concat(list.length - i - 1, \")\");\n        break;\n      }\n\n      truncated = '';\n    }\n\n    return \"\".concat(output).concat(truncated);\n  }\n\n  function quoteComplexKey(key) {\n    if (key.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)) {\n      return key;\n    }\n\n    return JSON.stringify(key).replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n  }\n\n  function inspectProperty(_ref2, options) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    options.truncate -= 2;\n\n    if (typeof key === 'string') {\n      key = quoteComplexKey(key);\n    } else if (typeof key !== 'number') {\n      key = \"[\".concat(options.inspect(key, options), \"]\");\n    }\n\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return \"\".concat(key, \": \").concat(value);\n  }\n\n  function inspectArray(array, options) {\n    // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n    var nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length) return '[]';\n    options.truncate -= 4;\n    var listContents = inspectList(array, options);\n    options.truncate -= listContents.length;\n    var propertyContents = '';\n\n    if (nonIndexProperties.length) {\n      propertyContents = inspectList(nonIndexProperties.map(function (key) {\n        return [key, array[key]];\n      }), options, inspectProperty);\n    }\n\n    return \"[ \".concat(listContents).concat(propertyContents ? \", \".concat(propertyContents) : '', \" ]\");\n  }\n\n  /* !\n   * Chai - getFuncName utility\n   * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n   * MIT Licensed\n   */\n\n  /**\n   * ### .getFuncName(constructorFn)\n   *\n   * Returns the name of a function.\n   * When a non-function instance is passed, returns `null`.\n   * This also includes a polyfill function if `aFunc.name` is not defined.\n   *\n   * @name getFuncName\n   * @param {Function} funct\n   * @namespace Utils\n   * @api public\n   */\n\n  var toString = Function.prototype.toString;\n  var functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\n  var maxFunctionSourceLength = 512;\n  function getFuncName(aFunc) {\n    if (typeof aFunc !== 'function') {\n      return null;\n    }\n\n    var name = '';\n    if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n      // eslint-disable-next-line prefer-reflect\n      var functionSource = toString.call(aFunc);\n      // To avoid unconstrained resource consumption due to pathalogically large function names,\n      // we limit the available return value to be less than 512 characters.\n      if (functionSource.indexOf('(') > maxFunctionSourceLength) {\n        return name;\n      }\n      // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n      var match = functionSource.match(functionNameMatch);\n      if (match) {\n        name = match[1];\n      }\n    } else {\n      // If we've got a `name` property we just use it\n      name = aFunc.name;\n    }\n\n    return name;\n  }\n\n  var getFuncName_1 = getFuncName;\n\n  var getArrayName = function getArrayName(array) {\n    // We need to special case Node.js' Buffers, which report to be Uint8Array\n    if (typeof Buffer === 'function' && array instanceof Buffer) {\n      return 'Buffer';\n    }\n\n    if (array[Symbol.toStringTag]) {\n      return array[Symbol.toStringTag];\n    }\n\n    return getFuncName_1(array.constructor);\n  };\n\n  function inspectTypedArray(array, options) {\n    var name = getArrayName(array);\n    options.truncate -= name.length + 4; // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n\n    var nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length) return \"\".concat(name, \"[]\"); // As we know TypedArrays only contain Unsigned Integers, we can skip inspecting each one and simply\n    // stylise the toString() value of them\n\n    var output = '';\n\n    for (var i = 0; i < array.length; i++) {\n      var string = \"\".concat(options.stylize(truncate(array[i], options.truncate), 'number')).concat(i === array.length - 1 ? '' : ', ');\n      options.truncate -= string.length;\n\n      if (array[i] !== array.length && options.truncate <= 3) {\n        output += \"\".concat(truncator, \"(\").concat(array.length - array[i] + 1, \")\");\n        break;\n      }\n\n      output += string;\n    }\n\n    var propertyContents = '';\n\n    if (nonIndexProperties.length) {\n      propertyContents = inspectList(nonIndexProperties.map(function (key) {\n        return [key, array[key]];\n      }), options, inspectProperty);\n    }\n\n    return \"\".concat(name, \"[ \").concat(output).concat(propertyContents ? \", \".concat(propertyContents) : '', \" ]\");\n  }\n\n  function inspectDate(dateObject, options) {\n    var stringRepresentation = dateObject.toJSON();\n\n    if (stringRepresentation === null) {\n      return 'Invalid Date';\n    }\n\n    var split = stringRepresentation.split('T');\n    var date = split[0]; // If we need to - truncate the time portion, but never the date\n\n    return options.stylize(\"\".concat(date, \"T\").concat(truncate(split[1], options.truncate - date.length - 1)), 'date');\n  }\n\n  function inspectFunction(func, options) {\n    var name = getFuncName_1(func);\n\n    if (!name) {\n      return options.stylize('[Function]', 'special');\n    }\n\n    return options.stylize(\"[Function \".concat(truncate(name, options.truncate - 11), \"]\"), 'special');\n  }\n\n  function inspectMapEntry(_ref, options) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    options.truncate -= 4;\n    key = options.inspect(key, options);\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return \"\".concat(key, \" => \").concat(value);\n  } // IE11 doesn't support `map.entries()`\n\n\n  function mapToEntries(map) {\n    var entries = [];\n    map.forEach(function (value, key) {\n      entries.push([key, value]);\n    });\n    return entries;\n  }\n\n  function inspectMap(map, options) {\n    var size = map.size - 1;\n\n    if (size <= 0) {\n      return 'Map{}';\n    }\n\n    options.truncate -= 7;\n    return \"Map{ \".concat(inspectList(mapToEntries(map), options, inspectMapEntry), \" }\");\n  }\n\n  var isNaN = Number.isNaN || function (i) {\n    return i !== i;\n  }; // eslint-disable-line no-self-compare\n\n\n  function inspectNumber(number, options) {\n    if (isNaN(number)) {\n      return options.stylize('NaN', 'number');\n    }\n\n    if (number === Infinity) {\n      return options.stylize('Infinity', 'number');\n    }\n\n    if (number === -Infinity) {\n      return options.stylize('-Infinity', 'number');\n    }\n\n    if (number === 0) {\n      return options.stylize(1 / number === Infinity ? '+0' : '-0', 'number');\n    }\n\n    return options.stylize(truncate(number, options.truncate), 'number');\n  }\n\n  function inspectBigInt(number, options) {\n    var nums = truncate(number.toString(), options.truncate - 1);\n    if (nums !== truncator) nums += 'n';\n    return options.stylize(nums, 'bigint');\n  }\n\n  function inspectRegExp(value, options) {\n    var flags = value.toString().split('/')[2];\n    var sourceLength = options.truncate - (2 + flags.length);\n    var source = value.source;\n    return options.stylize(\"/\".concat(truncate(source, sourceLength), \"/\").concat(flags), 'regexp');\n  }\n\n  function arrayFromSet(set) {\n    var values = [];\n    set.forEach(function (value) {\n      values.push(value);\n    });\n    return values;\n  }\n\n  function inspectSet(set, options) {\n    if (set.size === 0) return 'Set{}';\n    options.truncate -= 7;\n    return \"Set{ \".concat(inspectList(arrayFromSet(set), options), \" }\");\n  }\n\n  var stringEscapeChars = new RegExp(\"['\\\\u0000-\\\\u001f\\\\u007f-\\\\u009f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\" + \"\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]\", 'g');\n  var escapeCharacters = {\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\f': '\\\\f',\n    '\\r': '\\\\r',\n    \"'\": \"\\\\'\",\n    '\\\\': '\\\\\\\\'\n  };\n  var hex = 16;\n  var unicodeLength = 4;\n\n  function escape(char) {\n    return escapeCharacters[char] || \"\\\\u\".concat(\"0000\".concat(char.charCodeAt(0).toString(hex)).slice(-unicodeLength));\n  }\n\n  function inspectString(string, options) {\n    if (stringEscapeChars.test(string)) {\n      string = string.replace(stringEscapeChars, escape);\n    }\n\n    return options.stylize(\"'\".concat(truncate(string, options.truncate - 2), \"'\"), 'string');\n  }\n\n  function inspectSymbol(value) {\n    if ('description' in Symbol.prototype) {\n      return value.description ? \"Symbol(\".concat(value.description, \")\") : 'Symbol()';\n    }\n\n    return value.toString();\n  }\n\n  var getPromiseValue = function getPromiseValue() {\n    return 'Promise{\u2026}';\n  };\n\n  try {\n    var _process$binding = process.binding('util'),\n        getPromiseDetails = _process$binding.getPromiseDetails,\n        kPending = _process$binding.kPending,\n        kRejected = _process$binding.kRejected;\n\n    if (Array.isArray(getPromiseDetails(Promise.resolve()))) {\n      getPromiseValue = function getPromiseValue(value, options) {\n        var _getPromiseDetails = getPromiseDetails(value),\n            _getPromiseDetails2 = _slicedToArray(_getPromiseDetails, 2),\n            state = _getPromiseDetails2[0],\n            innerValue = _getPromiseDetails2[1];\n\n        if (state === kPending) {\n          return 'Promise{<pending>}';\n        }\n\n        return \"Promise\".concat(state === kRejected ? '!' : '', \"{\").concat(options.inspect(innerValue, options), \"}\");\n      };\n    }\n  } catch (notNode) {\n    /* ignore */\n  }\n\n  var inspectPromise = getPromiseValue;\n\n  function inspectObject(object, options) {\n    var properties = Object.getOwnPropertyNames(object);\n    var symbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : [];\n\n    if (properties.length === 0 && symbols.length === 0) {\n      return '{}';\n    }\n\n    options.truncate -= 4;\n    options.seen = options.seen || [];\n\n    if (options.seen.indexOf(object) >= 0) {\n      return '[Circular]';\n    }\n\n    options.seen.push(object);\n    var propertyContents = inspectList(properties.map(function (key) {\n      return [key, object[key]];\n    }), options, inspectProperty);\n    var symbolContents = inspectList(symbols.map(function (key) {\n      return [key, object[key]];\n    }), options, inspectProperty);\n    options.seen.pop();\n    var sep = '';\n\n    if (propertyContents && symbolContents) {\n      sep = ', ';\n    }\n\n    return \"{ \".concat(propertyContents).concat(sep).concat(symbolContents, \" }\");\n  }\n\n  var toStringTag = typeof Symbol !== 'undefined' && Symbol.toStringTag ? Symbol.toStringTag : false;\n  function inspectClass(value, options) {\n    var name = '';\n\n    if (toStringTag && toStringTag in value) {\n      name = value[toStringTag];\n    }\n\n    name = name || getFuncName_1(value.constructor); // Babel transforms anonymous classes to the name `_class`\n\n    if (!name || name === '_class') {\n      name = '<Anonymous Class>';\n    }\n\n    options.truncate -= name.length;\n    return \"\".concat(name).concat(inspectObject(value, options));\n  }\n\n  function inspectArguments(args, options) {\n    if (args.length === 0) return 'Arguments[]';\n    options.truncate -= 13;\n    return \"Arguments[ \".concat(inspectList(args, options), \" ]\");\n  }\n\n  var errorKeys = ['stack', 'line', 'column', 'name', 'message', 'fileName', 'lineNumber', 'columnNumber', 'number', 'description'];\n  function inspectObject$1(error, options) {\n    var properties = Object.getOwnPropertyNames(error).filter(function (key) {\n      return errorKeys.indexOf(key) === -1;\n    });\n    var name = error.name;\n    options.truncate -= name.length;\n    var message = '';\n\n    if (typeof error.message === 'string') {\n      message = truncate(error.message, options.truncate);\n    } else {\n      properties.unshift('message');\n    }\n\n    message = message ? \": \".concat(message) : '';\n    options.truncate -= message.length + 5;\n    var propertyContents = inspectList(properties.map(function (key) {\n      return [key, error[key]];\n    }), options, inspectProperty);\n    return \"\".concat(name).concat(message).concat(propertyContents ? \" { \".concat(propertyContents, \" }\") : '');\n  }\n\n  function inspectAttribute(_ref, options) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    options.truncate -= 3;\n\n    if (!value) {\n      return \"\".concat(options.stylize(key, 'yellow'));\n    }\n\n    return \"\".concat(options.stylize(key, 'yellow'), \"=\").concat(options.stylize(\"\\\"\".concat(value, \"\\\"\"), 'string'));\n  }\n  function inspectHTMLCollection(collection, options) {\n    // eslint-disable-next-line no-use-before-define\n    return inspectList(collection, options, inspectHTML, '\\n');\n  }\n  function inspectHTML(element, options) {\n    var properties = element.getAttributeNames();\n    var name = element.tagName.toLowerCase();\n    var head = options.stylize(\"<\".concat(name), 'special');\n    var headClose = options.stylize(\">\", 'special');\n    var tail = options.stylize(\"</\".concat(name, \">\"), 'special');\n    options.truncate -= name.length * 2 + 5;\n    var propertyContents = '';\n\n    if (properties.length > 0) {\n      propertyContents += ' ';\n      propertyContents += inspectList(properties.map(function (key) {\n        return [key, element.getAttribute(key)];\n      }), options, inspectAttribute, ' ');\n    }\n\n    options.truncate -= propertyContents.length;\n    var truncate = options.truncate;\n    var children = inspectHTMLCollection(element.children, options);\n\n    if (children && children.length > truncate) {\n      children = \"\".concat(truncator, \"(\").concat(element.children.length, \")\");\n    }\n\n    return \"\".concat(head).concat(propertyContents).concat(headClose).concat(children).concat(tail);\n  }\n\n  var symbolsSupported = typeof Symbol === 'function' && typeof Symbol.for === 'function';\n  var chaiInspect = symbolsSupported ? Symbol.for('chai/inspect') : '@@chai/inspect';\n  var nodeInspect = false;\n\n  try {\n    // eslint-disable-next-line global-require\n    var nodeUtil = require('util');\n\n    nodeInspect = nodeUtil.inspect ? nodeUtil.inspect.custom : false;\n  } catch (noNodeInspect) {\n    nodeInspect = false;\n  }\n\n  function FakeMap() {\n    // eslint-disable-next-line prefer-template\n    this.key = 'chai/loupe__' + Math.random() + Date.now();\n  }\n\n  FakeMap.prototype = {\n    // eslint-disable-next-line object-shorthand\n    get: function get(key) {\n      return key[this.key];\n    },\n    // eslint-disable-next-line object-shorthand\n    has: function has(key) {\n      return this.key in key;\n    },\n    // eslint-disable-next-line object-shorthand\n    set: function set(key, value) {\n      if (Object.isExtensible(key)) {\n        Object.defineProperty(key, this.key, {\n          // eslint-disable-next-line object-shorthand\n          value: value,\n          configurable: true\n        });\n      }\n    }\n  };\n  var constructorMap = new (typeof WeakMap === 'function' ? WeakMap : FakeMap)();\n  var stringTagMap = {};\n  var baseTypesMap = {\n    undefined: function undefined$1(value, options) {\n      return options.stylize('undefined', 'undefined');\n    },\n    null: function _null(value, options) {\n      return options.stylize(null, 'null');\n    },\n    boolean: function boolean(value, options) {\n      return options.stylize(value, 'boolean');\n    },\n    Boolean: function Boolean(value, options) {\n      return options.stylize(value, 'boolean');\n    },\n    number: inspectNumber,\n    Number: inspectNumber,\n    bigint: inspectBigInt,\n    BigInt: inspectBigInt,\n    string: inspectString,\n    String: inspectString,\n    function: inspectFunction,\n    Function: inspectFunction,\n    symbol: inspectSymbol,\n    // A Symbol polyfill will return `Symbol` not `symbol` from typedetect\n    Symbol: inspectSymbol,\n    Array: inspectArray,\n    Date: inspectDate,\n    Map: inspectMap,\n    Set: inspectSet,\n    RegExp: inspectRegExp,\n    Promise: inspectPromise,\n    // WeakSet, WeakMap are totally opaque to us\n    WeakSet: function WeakSet(value, options) {\n      return options.stylize('WeakSet{\u2026}', 'special');\n    },\n    WeakMap: function WeakMap(value, options) {\n      return options.stylize('WeakMap{\u2026}', 'special');\n    },\n    Arguments: inspectArguments,\n    Int8Array: inspectTypedArray,\n    Uint8Array: inspectTypedArray,\n    Uint8ClampedArray: inspectTypedArray,\n    Int16Array: inspectTypedArray,\n    Uint16Array: inspectTypedArray,\n    Int32Array: inspectTypedArray,\n    Uint32Array: inspectTypedArray,\n    Float32Array: inspectTypedArray,\n    Float64Array: inspectTypedArray,\n    Generator: function Generator() {\n      return '';\n    },\n    DataView: function DataView() {\n      return '';\n    },\n    ArrayBuffer: function ArrayBuffer() {\n      return '';\n    },\n    Error: inspectObject$1,\n    HTMLCollection: inspectHTMLCollection,\n    NodeList: inspectHTMLCollection\n  }; // eslint-disable-next-line complexity\n\n  var inspectCustom = function inspectCustom(value, options, type) {\n    if (chaiInspect in value && typeof value[chaiInspect] === 'function') {\n      return value[chaiInspect](options);\n    }\n\n    if (nodeInspect && nodeInspect in value && typeof value[nodeInspect] === 'function') {\n      return value[nodeInspect](options.depth, options);\n    }\n\n    if ('inspect' in value && typeof value.inspect === 'function') {\n      return value.inspect(options.depth, options);\n    }\n\n    if ('constructor' in value && constructorMap.has(value.constructor)) {\n      return constructorMap.get(value.constructor)(value, options);\n    }\n\n    if (stringTagMap[type]) {\n      return stringTagMap[type](value, options);\n    }\n\n    return '';\n  };\n\n  var toString$1 = Object.prototype.toString; // eslint-disable-next-line complexity\n\n  function inspect(value, options) {\n    options = normaliseOptions(options);\n    options.inspect = inspect;\n    var _options = options,\n        customInspect = _options.customInspect;\n    var type = value === null ? 'null' : _typeof(value);\n\n    if (type === 'object') {\n      type = toString$1.call(value).slice(8, -1);\n    } // If it is a base value that we already support, then use Loupe's inspector\n\n\n    if (baseTypesMap[type]) {\n      return baseTypesMap[type](value, options);\n    } // If `options.customInspect` is set to true then try to use the custom inspector\n\n\n    if (customInspect && value) {\n      var output = inspectCustom(value, options, type);\n\n      if (output) {\n        if (typeof output === 'string') return output;\n        return inspect(output, options);\n      }\n    }\n\n    var proto = value ? Object.getPrototypeOf(value) : false; // If it's a plain Object then use Loupe's inspector\n\n    if (proto === Object.prototype || proto === null) {\n      return inspectObject(value, options);\n    } // Specifically account for HTMLElements\n    // eslint-disable-next-line no-undef\n\n\n    if (value && typeof HTMLElement === 'function' && value instanceof HTMLElement) {\n      return inspectHTML(value, options);\n    }\n\n    if ('constructor' in value) {\n      // If it is a class, inspect it like an object but add the constructor name\n      if (value.constructor !== Object) {\n        return inspectClass(value, options);\n      } // If it is an object with an anonymous prototype, display it as an object.\n\n\n      return inspectObject(value, options);\n    } // last chance to check if it's an object\n\n\n    if (value === Object(value)) {\n      return inspectObject(value, options);\n    } // We have run out of options! Just stringify the value\n\n\n    return options.stylize(String(value), type);\n  }\n  function registerConstructor(constructor, inspector) {\n    if (constructorMap.has(constructor)) {\n      return false;\n    }\n\n    constructorMap.set(constructor, inspector);\n    return true;\n  }\n  function registerStringTag(stringTag, inspector) {\n    if (stringTag in stringTagMap) {\n      return false;\n    }\n\n    stringTagMap[stringTag] = inspector;\n    return true;\n  }\n  var custom = chaiInspect;\n\n  exports.custom = custom;\n  exports.default = inspect;\n  exports.inspect = inspect;\n  exports.registerConstructor = registerConstructor;\n  exports.registerStringTag = registerStringTag;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n", "module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']\n};\n", "// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar loupe = require('loupe');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var options = {\n    colors: colors,\n    depth: (typeof depth === 'undefined' ? 2 : depth),\n    showHidden: showHidden,\n    truncate: config.truncateThreshold ? config.truncateThreshold : Infinity,\n  };\n  return loupe.inspect(obj, options);\n}\n", "/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @returns {string} stringified object\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n", "/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n", "/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n", "'use strict';\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function get(key) {\n    return key[this._key];\n  },\n  set: function set(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n      return leftHandOperand === rightHandOperand;\n    case 'Error':\n      return keysEqual(leftHandOperand, rightHandOperand, [ 'name', 'message', 'code' ], options);\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Temporal.PlainDate':\n    case 'Temporal.PlainTime':\n    case 'Temporal.PlainDateTime':\n    case 'Temporal.Instant':\n    case 'Temporal.ZonedDateTime':\n    case 'Temporal.PlainYearMonth':\n    case 'Temporal.PlainMonthDay':\n      return leftHandOperand.equals(rightHandOperand);\n    case 'Temporal.Duration':\n      return leftHandOperand.total('nanoseconds') === rightHandOperand.total('nanoseconds');\n    case 'Temporal.TimeZone':\n    case 'Temporal.Calendar':\n      return leftHandOperand.toString() === rightHandOperand.toString();\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  try {\n    // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n    if (leftHandOperand.size !== rightHandOperand.size) {\n      return false;\n    }\n    if (leftHandOperand.size === 0) {\n      return true;\n    }\n  } catch (sizeError) {\n    // things that aren't actual Maps or Sets will throw here\n    return false;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\nfunction getEnumerableSymbols(target) {\n  var keys = [];\n  var allKeys = Object.getOwnPropertySymbols(target);\n  for (var i = 0; i < allKeys.length; i += 1) {\n    var key = allKeys[i];\n    if (Object.getOwnPropertyDescriptor(target, key).enumerable) {\n      keys.push(key);\n    }\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  var leftHandSymbols = getEnumerableSymbols(leftHandOperand);\n  var rightHandSymbols = getEnumerableSymbols(rightHandOperand);\n  leftHandKeys = leftHandKeys.concat(leftHandSymbols);\n  rightHandKeys = rightHandKeys.concat(rightHandSymbols);\n\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    if (iterableEqual(mapSymbols(leftHandKeys).sort(), mapSymbols(rightHandKeys).sort()) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n\nfunction mapSymbols(arr) {\n  return arr.map(function mapSymbol(entry) {\n    if (typeof entry === 'symbol') {\n      return entry.toString();\n    }\n\n    return entry;\n  });\n}\n", "var config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n", "/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n", "var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n", "/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n", "var config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n", "/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n", "/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n", "/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n", "/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n", "/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n", "/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n", "/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n", "/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n", "'use strict';\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar getFunctionName = require('get-func-name');\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike);\n    if (constructorName === '') {\n      var newConstructorName = getFunctionName(new errorLike()); // eslint-disable-line new-cap\n      constructorName = newConstructorName || constructorName;\n    }\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n", "/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n", "var type = require('type-detect');\n\nvar flag = require('./flag');\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};\n", "/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n\n/*!\n * getOperator method\n */\n\nexports.getOperator = require('./getOperator');", "/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      };\n\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n", "/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   * - also\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still', \"also\" ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : '';\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        var isEql = isDeep ? _.eql : SameValueZero;\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || _.eql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return _.eql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'the given combination of arguments ('\n            + objType + ' and '\n            + _.type(val).toLowerCase() + ')'\n            + ' is invalid for this assertion. '\n            + 'You can use an array, a map, an object, a set, a string, '\n            + 'or a weakset instead of a '\n            + _.type(val).toLowerCase(),\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * The alias `.exists` can be used interchangeably with `.exist`.\n   *\n   * @name exist\n   * @alias exists\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertExist () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  }\n\n  Assertion.addProperty('exist', assertExist);\n  Assertion.addProperty('exists', assertExist);\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that it\u2019s not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n   * `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @alias greaterThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n  Assertion.addMethod('greaterThanOrEqual', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n   * `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @alias lessThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n  Assertion.addMethod('lessThanOrEqual', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toISOString() + '..' + finish.toISOString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name];\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && (isDeep ? _.eql(val, value) : val === value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but it\u2019s not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      var deltaMessage = delta === undefined ? \", and a delta is required\" : \"\";\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers' + deltaMessage,\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * It can also be chained with `.contain` or `.include`, which will work with\n   * both arrays and strings:\n   *\n   *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n   *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n   *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n   *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , contains = flag(this, 'contains')\n      , isDeep = flag(this, 'deep');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    if (contains) {\n      this.assert(\n        list.some(function(possibility) { return expected.indexOf(possibility) > -1 })\n        , 'expected #{this} to contain one of #{exp}'\n        , 'expected #{this} to not contain one of #{exp}'\n        , list\n        , expected\n      );\n    } else {\n      if (isDeep) {\n        this.assert(\n          list.some(function(possibility) { return _.eql(expected, possibility) })\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , list\n          , expected\n        );\n      } else {\n        this.assert(\n          list.indexOf(expected) > -1\n          , 'expected #{this} to be one of #{exp}'\n          , 'expected #{this} to not be one of #{exp}'\n          , list\n          , expected\n        );\n      }\n    }\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n", "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n", "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol\n          || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n", "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecreaseBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n", "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.3.8';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n", "module.exports = require('./lib/chai');\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction padString(input) {\n    var segmentLength = 4;\n    var stringLength = input.length;\n    var diff = stringLength % segmentLength;\n    if (!diff) {\n        return input;\n    }\n    var position = stringLength;\n    var padLength = segmentLength - diff;\n    var paddedStringLength = stringLength + padLength;\n    var buffer = Buffer.alloc(paddedStringLength);\n    buffer.write(input);\n    while (padLength--) {\n        buffer.write(\"=\", position++);\n    }\n    return buffer.toString();\n}\nexports.default = padString;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pad_string_1 = require(\"./pad-string\");\nfunction encode(input, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    if (Buffer.isBuffer(input)) {\n        return fromBase64(input.toString(\"base64\"));\n    }\n    return fromBase64(Buffer.from(input, encoding).toString(\"base64\"));\n}\n;\nfunction decode(base64url, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    return Buffer.from(toBase64(base64url), \"base64\").toString(encoding);\n}\nfunction toBase64(base64url) {\n    base64url = base64url.toString();\n    return pad_string_1.default(base64url)\n        .replace(/\\-/g, \"+\")\n        .replace(/_/g, \"/\");\n}\nfunction fromBase64(base64) {\n    return base64\n        .replace(/=/g, \"\")\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\");\n}\nfunction toBuffer(base64url) {\n    return Buffer.from(toBase64(base64url), \"base64\");\n}\nvar base64url = encode;\nbase64url.encode = encode;\nbase64url.decode = decode;\nbase64url.toBase64 = toBase64;\nbase64url.fromBase64 = fromBase64;\nbase64url.toBuffer = toBuffer;\nexports.default = base64url;\n", "module.exports = require('./dist/base64url').default;\nmodule.exports.default = module.exports;\n", "import chai from './index.js';\n\nexport const expect = chai.expect;\nexport const version = chai.version;\nexport const Assertion = chai.Assertion;\nexport const AssertionError = chai.AssertionError;\nexport const util = chai.util;\nexport const config = chai.config;\nexport const use = chai.use;\nexport const should = chai.should;\nexport const assert = chai.assert;\nexport const core = chai.core;\n\nexport default chai;\n", "var e=(I,A)=>()=>(A||I((A={exports:{}}).exports,A),A.exports);var f=e((wA,X)=>{\"use strict\";X.exports=\"\"});var iA=e((oA,Q)=>{var r={};r.__wbindgen_placeholder__=Q.exports;var C,a=new Array(128).fill(void 0);a.push(void 0,null,!0,!1);function o(I){return a[I]}var q=a.length;function IA(I){I<132||(a[I]=q,q=I)}function M(I){let A=o(I);return IA(I),A}var V=new TextDecoder(\"utf-8\",{ignoreBOM:!0,fatal:!0});V.decode();var d=null;function U(){return(d===null||d.byteLength===0)&&(d=new Uint8Array(C.memory.buffer)),d}function h(I,A){return I=I>>>0,V.decode(U().subarray(I,I+A))}function c(I){q===a.length&&a.push(a.length+1);let A=q;return q=a[A],a[A]=I,A}function J(I,A){if(!(I instanceof A))throw new Error(`expected instance of ${A.name}`);return I.ptr}var K=null;function D(){return(K===null||K.buffer.detached===!0||K.buffer.detached===void 0&&K.buffer!==C.memory.buffer)&&(K=new DataView(C.memory.buffer)),K}Q.exports.new_in_memory_key_manager=function(){try{let B=C.__wbindgen_add_to_stack_pointer(-16);C.new_in_memory_key_manager(B);var I=D().getInt32(B+4*0,!0),A=D().getInt32(B+4*1,!0),g=D().getInt32(B+4*2,!0);if(g)throw M(A);return p.__wrap(I)}finally{C.__wbindgen_add_to_stack_pointer(16)}};var R=128;function l(I){if(R==1)throw new Error(\"out of js stack\");return a[--R]=I,R}Q.exports.poc_key_manager_from_foreign=function(I){try{let A=C.poc_key_manager_from_foreign(l(I));return Y.__wrap(A)}finally{a[R++]=void 0}};var y=0,L=new TextEncoder(\"utf-8\"),gA=typeof L.encodeInto==\"function\"?function(I,A){return L.encodeInto(I,A)}:function(I,A){let g=L.encode(I);return A.set(g),{read:I.length,written:g.length}};function H(I,A,g){if(g===void 0){let G=L.encode(I),F=A(G.length,1)>>>0;return U().subarray(F,F+G.length).set(G),y=G.length,F}let B=I.length,E=A(B,1)>>>0,i=U(),w=0;for(;w<B;w++){let G=I.charCodeAt(w);if(G>127)break;i[E+w]=G}if(w!==B){w!==0&&(I=I.slice(w)),E=g(E,B,B=w+I.length*3,1)>>>0;let G=U().subarray(E+w,E+B),F=gA(I,G);w+=F.written,E=g(E,B,w,1)>>>0}return y=w,E}function t(I){return I==null}function CA(I,A){let g=A(I.length*1,1)>>>0;return U().set(I,g/1),y=I.length,g}function BA(I,A){return I=I>>>0,U().subarray(I/1,I/1+A)}Q.exports.generate_ed25519_key=function(){try{let B=C.__wbindgen_add_to_stack_pointer(-16);C.generate_ed25519_key(B);var I=D().getInt32(B+4*0,!0),A=D().getInt32(B+4*1,!0),g=D().getInt32(B+4*2,!0);if(g)throw M(A);return N.__wrap(I)}finally{C.__wbindgen_add_to_stack_pointer(16)}};Q.exports.generate_secp256k1_key=function(){try{let B=C.__wbindgen_add_to_stack_pointer(-16);C.generate_secp256k1_key(B);var I=D().getInt32(B+4*0,!0),A=D().getInt32(B+4*1,!0),g=D().getInt32(B+4*2,!0);if(g)throw M(A);return N.__wrap(I)}finally{C.__wbindgen_add_to_stack_pointer(16)}};Q.exports.new_ed25519_signer=function(I){try{let i=C.__wbindgen_add_to_stack_pointer(-16);J(I,N);var A=I.__destroy_into_raw();C.new_ed25519_signer(i,A);var g=D().getInt32(i+4*0,!0),B=D().getInt32(i+4*1,!0),E=D().getInt32(i+4*2,!0);if(E)throw M(B);return Y.__wrap(g)}finally{C.__wbindgen_add_to_stack_pointer(16)}};Q.exports.new_secp256k1_signer=function(I){try{let i=C.__wbindgen_add_to_stack_pointer(-16);J(I,N);var A=I.__destroy_into_raw();C.new_secp256k1_signer(i,A);var g=D().getInt32(i+4*0,!0),B=D().getInt32(i+4*1,!0),E=D().getInt32(i+4*2,!0);if(E)throw M(B);return Y.__wrap(g)}finally{C.__wbindgen_add_to_stack_pointer(16)}};Q.exports.call_js_functions=function(I){try{C.call_js_functions(l(I))}finally{a[R++]=void 0}};function S(I,A){try{return I.apply(this,A)}catch(g){C.__wbindgen_exn_store(c(g))}}var Z=typeof FinalizationRegistry>\"u\"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(I=>C.__wbg_wasmjwk_free(I>>>0,1)),N=class I{static __wrap(A){A=A>>>0;let g=Object.create(I.prototype);return g.__wbg_ptr=A,Z.register(g,g.__wbg_ptr,g),g}__destroy_into_raw(){let A=this.__wbg_ptr;return this.__wbg_ptr=0,Z.unregister(this),A}free(){let A=this.__destroy_into_raw();C.__wbg_wasmjwk_free(A,0)}constructor(A,g,B,E,i,w){var G=t(A)?0:H(A,C.__wbindgen_malloc,C.__wbindgen_realloc),F=y;let k=H(g,C.__wbindgen_malloc,C.__wbindgen_realloc),O=y,j=H(B,C.__wbindgen_malloc,C.__wbindgen_realloc),P=y;var z=t(E)?0:H(E,C.__wbindgen_malloc,C.__wbindgen_realloc),T=y;let u=H(i,C.__wbindgen_malloc,C.__wbindgen_realloc),v=y;var _=t(w)?0:H(w,C.__wbindgen_malloc,C.__wbindgen_realloc),$=y;let AA=C.wasmjwk_new(G,F,k,O,j,P,z,T,u,v,_,$);return this.__wbg_ptr=AA>>>0,Z.register(this,this.__wbg_ptr,this),this}compute_thumbprint(){let A,g;try{let k=C.__wbindgen_add_to_stack_pointer(-16);C.wasmjwk_compute_thumbprint(k,this.__wbg_ptr);var B=D().getInt32(k+4*0,!0),E=D().getInt32(k+4*1,!0),i=D().getInt32(k+4*2,!0),w=D().getInt32(k+4*3,!0),G=B,F=E;if(w)throw G=0,F=0,M(i);return A=G,g=F,h(G,F)}finally{C.__wbindgen_add_to_stack_pointer(16),C.__wbindgen_free(A,g,1)}}get alg(){try{let B=C.__wbindgen_add_to_stack_pointer(-16);C.wasmjwk_alg(B,this.__wbg_ptr);var A=D().getInt32(B+4*0,!0),g=D().getInt32(B+4*1,!0);let E;return A!==0&&(E=h(A,g).slice(),C.__wbindgen_free(A,g*1,1)),E}finally{C.__wbindgen_add_to_stack_pointer(16)}}get kty(){let A,g;try{let i=C.__wbindgen_add_to_stack_pointer(-16);C.wasmjwk_kty(i,this.__wbg_ptr);var B=D().getInt32(i+4*0,!0),E=D().getInt32(i+4*1,!0);return A=B,g=E,h(B,E)}finally{C.__wbindgen_add_to_stack_pointer(16),C.__wbindgen_free(A,g,1)}}get crv(){let A,g;try{let i=C.__wbindgen_add_to_stack_pointer(-16);C.wasmjwk_crv(i,this.__wbg_ptr);var B=D().getInt32(i+4*0,!0),E=D().getInt32(i+4*1,!0);return A=B,g=E,h(B,E)}finally{C.__wbindgen_add_to_stack_pointer(16),C.__wbindgen_free(A,g,1)}}get d(){try{let B=C.__wbindgen_add_to_stack_pointer(-16);C.wasmjwk_d(B,this.__wbg_ptr);var A=D().getInt32(B+4*0,!0),g=D().getInt32(B+4*1,!0);let E;return A!==0&&(E=h(A,g).slice(),C.__wbindgen_free(A,g*1,1)),E}finally{C.__wbindgen_add_to_stack_pointer(16)}}get x(){let A,g;try{let i=C.__wbindgen_add_to_stack_pointer(-16);C.wasmjwk_x(i,this.__wbg_ptr);var B=D().getInt32(i+4*0,!0),E=D().getInt32(i+4*1,!0);return A=B,g=E,h(B,E)}finally{C.__wbindgen_add_to_stack_pointer(16),C.__wbindgen_free(A,g,1)}}get y(){try{let B=C.__wbindgen_add_to_stack_pointer(-16);C.wasmjwk_y(B,this.__wbg_ptr);var A=D().getInt32(B+4*0,!0),g=D().getInt32(B+4*1,!0);let E;return A!==0&&(E=h(A,g).slice(),C.__wbindgen_free(A,g*1,1)),E}finally{C.__wbindgen_add_to_stack_pointer(16)}}};Q.exports.WasmJwk=N;var m=typeof FinalizationRegistry>\"u\"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(I=>C.__wbg_wasmkeymanager_free(I>>>0,1)),p=class I{static __wrap(A){A=A>>>0;let g=Object.create(I.prototype);return g.__wbg_ptr=A,m.register(g,g.__wbg_ptr,g),g}__destroy_into_raw(){let A=this.__wbg_ptr;return this.__wbg_ptr=0,m.unregister(this),A}free(){let A=this.__destroy_into_raw();C.__wbg_wasmkeymanager_free(A,0)}import_private_jwk(A){try{let w=C.__wbindgen_add_to_stack_pointer(-16);J(A,N);var g=A.__destroy_into_raw();C.wasmkeymanager_import_private_jwk(w,this.__wbg_ptr,g);var B=D().getInt32(w+4*0,!0),E=D().getInt32(w+4*1,!0),i=D().getInt32(w+4*2,!0);if(i)throw M(E);return N.__wrap(B)}finally{C.__wbindgen_add_to_stack_pointer(16)}}get_signer(A){try{let w=C.__wbindgen_add_to_stack_pointer(-16);J(A,N);var g=A.__destroy_into_raw();C.wasmkeymanager_get_signer(w,this.__wbg_ptr,g);var B=D().getInt32(w+4*0,!0),E=D().getInt32(w+4*1,!0),i=D().getInt32(w+4*2,!0);if(i)throw M(E);return Y.__wrap(B)}finally{C.__wbindgen_add_to_stack_pointer(16)}}};Q.exports.WasmKeyManager=p;var W=typeof FinalizationRegistry>\"u\"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(I=>C.__wbg_wasmsigner_free(I>>>0,1)),Y=class I{static __wrap(A){A=A>>>0;let g=Object.create(I.prototype);return g.__wbg_ptr=A,W.register(g,g.__wbg_ptr,g),g}__destroy_into_raw(){let A=this.__wbg_ptr;return this.__wbg_ptr=0,W.unregister(this),A}free(){let A=this.__destroy_into_raw();C.__wbg_wasmsigner_free(A,0)}sign(A){try{let G=C.__wbindgen_add_to_stack_pointer(-16),F=CA(A,C.__wbindgen_malloc),k=y;C.wasmsigner_sign(G,this.__wbg_ptr,F,k);var g=D().getInt32(G+4*0,!0),B=D().getInt32(G+4*1,!0),E=D().getInt32(G+4*2,!0),i=D().getInt32(G+4*3,!0);if(i)throw M(E);var w=BA(g,B).slice();return C.__wbindgen_free(g,B*1,1),w}finally{C.__wbindgen_add_to_stack_pointer(16)}}};Q.exports.WasmSigner=Y;var QA=typeof FinalizationRegistry>\"u\"?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(I=>C.__wbg_wasmweb5error_free(I>>>0,1)),x=class{__destroy_into_raw(){let A=this.__wbg_ptr;return this.__wbg_ptr=0,QA.unregister(this),A}free(){let A=this.__destroy_into_raw();C.__wbg_wasmweb5error_free(A,0)}get variant(){let A,g;try{let i=C.__wbindgen_add_to_stack_pointer(-16);C.wasmweb5error_variant(i,this.__wbg_ptr);var B=D().getInt32(i+4*0,!0),E=D().getInt32(i+4*1,!0);return A=B,g=E,h(B,E)}finally{C.__wbindgen_add_to_stack_pointer(16),C.__wbindgen_free(A,g,1)}}get message(){let A,g;try{let i=C.__wbindgen_add_to_stack_pointer(-16);C.wasmweb5error_message(i,this.__wbg_ptr);var B=D().getInt32(i+4*0,!0),E=D().getInt32(i+4*1,!0);return A=B,g=E,h(B,E)}finally{C.__wbindgen_add_to_stack_pointer(16),C.__wbindgen_free(A,g,1)}}get is_web5_error(){return C.wasmweb5error_is_web5_error(this.__wbg_ptr)!==0}};Q.exports.WasmWeb5Error=x;Q.exports.__wbg_importprivatejwk_6481d631455374e9=function(I,A){let g=o(I).import_private_jwk(N.__wrap(A));J(g,N);var B=g.__destroy_into_raw();return B};Q.exports.__wbg_getsigner_7bc86efbf645d9a5=function(I,A){let g=o(I).get_signer(N.__wrap(A));J(g,Y);var B=g.__destroy_into_raw();return B};Q.exports.__wbg_hello1_5cdaa3868c734289=function(I){o(I).hello1()};Q.exports.__wbg_hello2_84db0093f7bea192=function(I){o(I).hello2()};Q.exports.__wbindgen_object_drop_ref=function(I){M(I)};Q.exports.__wbindgen_string_new=function(I,A){let g=h(I,A);return c(g)};Q.exports.__wbindgen_is_object=function(I){let A=o(I);return typeof A==\"object\"&&A!==null};Q.exports.__wbindgen_object_clone_ref=function(I){let A=o(I);return c(A)};Q.exports.__wbg_set_f975102236d3c502=function(I,A,g){o(I)[M(A)]=M(g)};Q.exports.__wbg_crypto_1d1f22824a6a080c=function(I){let A=o(I).crypto;return c(A)};Q.exports.__wbg_process_4a72847cc503995b=function(I){let A=o(I).process;return c(A)};Q.exports.__wbg_versions_f686565e586dd935=function(I){let A=o(I).versions;return c(A)};Q.exports.__wbg_node_104a2ff8d6ea03a2=function(I){let A=o(I).node;return c(A)};Q.exports.__wbindgen_is_string=function(I){return typeof o(I)==\"string\"};Q.exports.__wbg_msCrypto_eb05e62b530a1508=function(I){let A=o(I).msCrypto;return c(A)};Q.exports.__wbg_require_cca90b1a94a0255b=function(){return S(function(){let I=Q.require;return c(I)},arguments)};Q.exports.__wbindgen_is_function=function(I){return typeof o(I)==\"function\"};Q.exports.__wbg_randomFillSync_5c9c955aa56b6049=function(){return S(function(I,A){o(I).randomFillSync(M(A))},arguments)};Q.exports.__wbg_getRandomValues_3aa56aa6edec874c=function(){return S(function(I,A){o(I).getRandomValues(o(A))},arguments)};Q.exports.__wbg_newnoargs_76313bd6ff35d0f2=function(I,A){let g=new Function(h(I,A));return c(g)};Q.exports.__wbg_call_1084a111329e68ce=function(){return S(function(I,A){let g=o(I).call(o(A));return c(g)},arguments)};Q.exports.__wbg_new_525245e2b9901204=function(){let I=new Object;return c(I)};Q.exports.__wbg_self_3093d5d1f7bcb682=function(){return S(function(){let I=self.self;return c(I)},arguments)};Q.exports.__wbg_window_3bcfc4d31bc012f8=function(){return S(function(){let I=window.window;return c(I)},arguments)};Q.exports.__wbg_globalThis_86b222e13bdf32ed=function(){return S(function(){let I=globalThis.globalThis;return c(I)},arguments)};Q.exports.__wbg_global_e5a3fe56f8be9485=function(){return S(function(){let I=global.global;return c(I)},arguments)};Q.exports.__wbindgen_is_undefined=function(I){return o(I)===void 0};Q.exports.__wbg_call_89af060b4e1523f2=function(){return S(function(I,A,g){let B=o(I).call(o(A),o(g));return c(B)},arguments)};Q.exports.__wbg_buffer_b7b08af79b0b0974=function(I){let A=o(I).buffer;return c(A)};Q.exports.__wbg_newwithbyteoffsetandlength_8a2cb9ca96b27ec9=function(I,A,g){let B=new Uint8Array(o(I),A>>>0,g>>>0);return c(B)};Q.exports.__wbg_new_ea1883e1e5e86686=function(I){let A=new Uint8Array(o(I));return c(A)};Q.exports.__wbg_set_d1e79e2388520f18=function(I,A,g){o(I).set(o(A),g>>>0)};Q.exports.__wbg_newwithlength_ec548f448387c968=function(I){let A=new Uint8Array(I>>>0);return c(A)};Q.exports.__wbg_subarray_7c2e3576afe181d1=function(I,A,g){let B=o(I).subarray(A>>>0,g>>>0);return c(B)};Q.exports.__wbindgen_throw=function(I,A){throw new Error(h(I,A))};Q.exports.__wbindgen_memory=function(){let I=C.memory;return c(I)};var n=!1;Q.exports.loadWasmSync=function(){if(n)return;if(s)throw new Error(\"Asynchronous initialization already in progress: cannot initialise synchronously\");let I=b(f()),A=new WebAssembly.Module(I);C=new WebAssembly.Instance(A,r).exports,n=!0};var s=null;Q.exports.loadWasmAsync=function(){return n?Promise.resolve():(s||(s=Promise.resolve().then(()=>f()).then(I=>WebAssembly.instantiate(b(I),r)).then(I=>{C=I.instance.exports,n=!0})),s)};var EA=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,62,0,63,52,53,54,55,56,57,58,59,60,61,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0,0,0,0,63,0,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]);function b(I){let A=I.replace(/[^A-Za-z0-9+/]/g,\"\"),g=A.length,B=g*3+1>>2,E=new Uint8Array(B),i,w,G=0,F=0;for(let k=0;k<g;k++)if(w=k&3,G|=EA[A.charCodeAt(k)]<<6*(3-w),w===3||g-k===1){for(i=0;i<3&&F<B;)E[F]=G>>>(16>>>i&24)&255,i++,F++;G=0}return E}});export default iA();\n", "import wasm from \"./generated\"\nexport {default} from \"./generated\"\n\nwasm.loadWasmSync();\n", "export class Web5Error extends Error {\n    constructor(variant, message) {\n        super(message);\n        this.variant = variant;\n        this.name = 'Web5Error';\n    }\n}\nexport const catchWeb5Error = (error) => {\n    if (error && typeof error === 'object' && error.is_web5_error) {\n        return new Web5Error(error.variant, error.message);\n    }\n    return error;\n};\n", "import { catchWeb5Error } from \"../errors\";\nimport wasm from \"../wasm\";\nexport class Jwk {\n    static fromWasmJwk(wasmJwk) {\n        return new Jwk(wasmJwk.alg, wasmJwk.kty, wasmJwk.crv, wasmJwk.d, wasmJwk.x, wasmJwk.y);\n    }\n    constructor(alg, kty, crv, d, x, y) {\n        this.alg = alg;\n        this.kty = kty;\n        this.crv = crv;\n        this.d = d;\n        this.x = x;\n        this.y = y;\n    }\n    toWasmJwk() {\n        return new wasm.WasmJwk(this.alg, this.kty, this.crv, this.d, this.x, this.y);\n    }\n    computeThumbprint() {\n        try {\n            const wasmJwk = this.toWasmJwk();\n            return wasmJwk.compute_thumbprint();\n        }\n        catch (error) {\n            throw catchWeb5Error(error);\n        }\n    }\n}\n", "import { catchWeb5Error } from \"../../errors\";\nexport class TypescriptSigner {\n    constructor(wasmSigner) {\n        this.wasmSigner = wasmSigner;\n    }\n    sign(payload) {\n        try {\n            return this.wasmSigner.sign(payload);\n        }\n        catch (error) {\n            throw catchWeb5Error(error);\n        }\n    }\n}\n", "import wasm from \"../../wasm\";\nimport { Jwk } from \"../jwk\";\nimport { catchWeb5Error } from \"../../errors\";\nimport { TypescriptSigner } from \".\";\nexport class Ed25519Generator {\n    static generate() {\n        try {\n            const wasmJwk = wasm.generate_ed25519_key();\n            return Jwk.fromWasmJwk(wasmJwk);\n        }\n        catch (error) {\n            throw catchWeb5Error(error);\n        }\n    }\n}\nexport class Ed25519Signer {\n    constructor(jwk) {\n        try {\n            this.signer = new TypescriptSigner(wasm.new_ed25519_signer(jwk.toWasmJwk()));\n        }\n        catch (error) {\n            throw catchWeb5Error(error);\n        }\n    }\n    sign(payload) {\n        return this.signer.sign(payload);\n    }\n}\n", "import { expect } from \"chai\";\nimport { Ed25519Generator, Ed25519Signer } from \"../../../src/crypto/dsa/ed25519\";\nimport base64url from \"base64url\";\nimport { Web5Error } from \"../../../src/errors\";\ndescribe(\"Ed25519Generator class\", () => {\n    it(\"should set alg to Ed25519\", () => {\n        const jwk = Ed25519Generator.generate();\n        expect(jwk.alg).to.equal(\"Ed25519\");\n    });\n    it(\"should set kty to OKP\", () => {\n        const jwk = Ed25519Generator.generate();\n        expect(jwk.kty).to.equal(\"OKP\");\n    });\n    it(\"should set crv to Ed25519\", () => {\n        const jwk = Ed25519Generator.generate();\n        expect(jwk.crv).to.equal(\"Ed25519\");\n    });\n    it(\"should set the public key (x) with the correct length\", () => {\n        const jwk = Ed25519Generator.generate();\n        const publicKeyBytes = base64url.toBuffer(jwk.x);\n        expect(publicKeyBytes.length).to.equal(32);\n    });\n    it(\"should set the private key (d) with the correct length\", () => {\n        const jwk = Ed25519Generator.generate();\n        const privateKey = jwk.d;\n        expect(privateKey).to.not.be.undefined;\n        const privateKeyBytes = base64url.toBuffer(privateKey);\n        expect(privateKeyBytes.length).to.equal(32);\n    });\n});\ndescribe(\"Ed25519Signer class\", () => {\n    it(\"should sign with a valid key\", async () => {\n        const jwk = Ed25519Generator.generate();\n        const signer = new Ed25519Signer(jwk);\n        const message = new TextEncoder().encode(\"Test message\");\n        const signature = signer.sign(message);\n        expect(signature).to.be.instanceOf(Uint8Array);\n        expect(signature.length).to.equal(64);\n    });\n    it(\"should fail to sign with an invalid private key\", async () => {\n        const jwk = Ed25519Generator.generate();\n        jwk.d = base64url.encode(\"invalid_d_key\");\n        const signer = new Ed25519Signer(jwk);\n        const message = new TextEncoder().encode(\"Test message\");\n        try {\n            signer.sign(message);\n        }\n        catch (error) {\n            expect(error instanceof Web5Error).to.equal(true);\n            expect(error.variant).to.equal(\"Crypto\");\n            expect(error.message).to.include(\"cryptography error invalid private key length\");\n        }\n    });\n    it(\"should fail to sign with a missing private key\", async () => {\n        // Generate a valid JWK but remove the private key (d)\n        const jwk = Ed25519Generator.generate();\n        jwk.d = undefined; // Remove the private key\n        const signer = new Ed25519Signer(jwk);\n        const message = new TextEncoder().encode(\"Test message\");\n        try {\n            signer.sign(message);\n        }\n        catch (error) {\n            expect(error instanceof Web5Error).to.equal(true);\n            expect(error.variant).to.equal(\"Crypto\");\n            expect(error.message).to.equal(\"cryptography error private key material must be set\");\n        }\n    });\n});\n"],
  "mappings": "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",
  "names": ["AssertionError", "e", "global", "AssertionError", "global", "exports", "obj", "truncate", "getArrayName", "getPromiseValue", "Boolean", "WeakSet", "WeakMap", "DataView", "inspectCustom", "config", "config", "config", "chai", "config", "chai", "chai", "chai", "chai", "chai", "config", "util", "AssertionError", "Assertion", "chai", "Assertion", "AssertionError", "matchIdx", "chai", "util", "chai", "util", "Assertion", "should", "chai", "util", "Assertion", "assert", "util", "config", "core", "expect", "should", "assert", "require_chai", "base64url", "require_base64url", "chai", "base64url"]
}
